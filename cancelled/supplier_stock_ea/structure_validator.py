"""
–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ supplier_stocks (statistics-api).

–≠—Ç–∞–ª–æ–Ω –≤–∑—è—Ç –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–≤–µ—Ç–∞ (–∫–ª—é—á–∏):
['Discount', 'Price', 'SCCode', 'barcode', 'brand', 'category', 'inWayFromClient',
 'inWayToClient', 'isRealization', 'isSupply', 'lastChangeDate', 'nmId', 'quantity',
 'quantityFull', 'subject', 'supplierArticle', 'techSize', 'warehouseName']
"""

from typing import Any, Dict, List


EXPECTED_FIELDS = {
    'lastChangeDate': str,
    'warehouseName': str,
    'supplierArticle': str,
    'nmId': int,
    'barcode': str,
    'quantity': int,
    'inWayToClient': int,
    'inWayFromClient': int,
    'quantityFull': int,
    'category': str,
    'subject': str,
    'brand': str,
    'techSize': str,
    'Price': (int, float),
    'Discount': (int, float),
    'isSupply': bool,
    'isRealization': bool,
    'SCCode': str,
}


def validate_record_structure(record: Dict[str, Any]) -> bool:
    for field, expected_type in EXPECTED_FIELDS.items():
        if field not in record:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ '{field}'")
            return False
        if not isinstance(record[field], expected_type):
            print(
                f"‚ùå –ü–æ–ª–µ '{field}' –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {type(record[field])}"
            )
            return False
    return True


def check_and_validate_structure(data: List[Dict[str, Any]]) -> bool:
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞ supplier_stocks...")

    if not isinstance(data, list):
        print("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π")
        return False
    if not data:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π ‚Äî –Ω–µ—á–µ–≥–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å")
        return True

    first = data[0]
    if validate_record_structure(first):
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return True
    else:
        print("üõë –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–¥–∞")
        return handle_structure_change()


def handle_structure_change() -> bool:
    """–î–∏–∞–ª–æ–≥ –∫–∞–∫ –≤ warehouse: —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ."""
    print("\n" + "=" * 50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ supplier_stocks")
    print("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –∏–∑–º–µ–Ω–µ–Ω–∏—è API, –Ω–æ–≤—ã–µ –ø–æ–ª—è, —Ç–∏–ø—ã –∏ —Ç.–¥.")
    print("–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
    print("1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–∞ —Å–≤–æ–π —Ä–∏—Å–∫)")
    print("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏–ª–∏ 2): ").strip()
        if choice == "1":
            print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
            return True
        if choice == "2":
            print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")



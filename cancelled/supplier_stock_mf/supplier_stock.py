"""
Main-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–∑–æ–≤–∞ Statistics API /api/v1/supplier/stocks.

–ö–∞–∫ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è dateFrom (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑):
1) MANUAL_DATE_FROM ‚Äî –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ—Ä—ë–º –µ—ë
2) –ê—Ä–≥—É–º–µ–Ω—Ç --date-from ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
3) –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–µ–≥–æ–¥–Ω—è (–ú–°–ö) –º–∏–Ω—É—Å 3 –º–µ—Å—è—Ü–∞

–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä—ã:
  python3 WB/main_function/supplier_stock_mf/supplier_stock.py
  python3 WB/main_function/supplier_stock_mf/supplier_stock.py --date-from 2019-06-20

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  --date-from: —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ dateFrom (RFC3339)
  --max-pages: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è —Ç–µ—Å—Ç–∞)
  --no-throttle: –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ù–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚Äî –ª–∏–º–∏—Ç 1/–º–∏–Ω)
"""

from __future__ import annotations

import argparse
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional

import importlib.util

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å warehouse_remains_mf
BASE_DIR = Path(__file__).resolve().parents[2]
wb_api_path = BASE_DIR / 'wb_api' / 'supplier_stocks.py'
spec = importlib.util.spec_from_file_location("supplier_stocks", str(wb_api_path))
supplier_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(supplier_module)
WildberriesSupplierStocksAPI = supplier_module.WildberriesSupplierStocksAPI

# API –∫–ª—é—á–∏
api_keys_path = BASE_DIR / 'api_keys.py'
spec_keys = importlib.util.spec_from_file_location("api_keys", str(api_keys_path))
api_keys_module = importlib.util.module_from_spec(spec_keys)
spec_keys.loader.exec_module(api_keys_module)
API_KEY = api_keys_module.WB_API_TOKEN

# –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è supplier_stock
supplier_validator_path = BASE_DIR / 'excel_actions' / 'supplier_stock_ea' / 'structure_validator.py'
spec_validator = importlib.util.spec_from_file_location("structure_validator", str(supplier_validator_path))
validator_module = importlib.util.module_from_spec(spec_validator)
spec_validator.loader.exec_module(validator_module)
check_and_validate_structure = validator_module.check_and_validate_structure

# –ò–º–ø–æ—Ä—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
transform_path = BASE_DIR / 'excel_actions' / 'supplier_stock_ea' / 'transform.py'
spec_transform = importlib.util.spec_from_file_location("transform", str(transform_path))
transform_module = importlib.util.module_from_spec(spec_transform)
spec_transform.loader.exec_module(transform_module)
aggregate_per_warehouse = transform_module.aggregate_per_warehouse
aggregate_inway_totals = transform_module.aggregate_inway_totals

# –ò–º–ø–æ—Ä—Ç —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ —Ñ–∏–ª—å—Ç—Ä–∞
reader_path = BASE_DIR / 'excel_actions' / 'supplier_stock_ea' / 'article_list_reader.py'
spec_reader = importlib.util.spec_from_file_location("article_list_reader", str(reader_path))
reader_module = importlib.util.module_from_spec(spec_reader)
spec_reader.loader.exec_module(reader_module)
get_article_list_from_google_sheets = reader_module.get_article_list_from_google_sheets

filter_path = BASE_DIR / 'excel_actions' / 'supplier_stock_ea' / 'article_filter.py'
spec_filter = importlib.util.spec_from_file_location("article_filter", str(filter_path))
filter_module = importlib.util.module_from_spec(spec_filter)
spec_filter.loader.exec_module(filter_module)
filter_articles_by_list = filter_module.filter_articles_by_list
print_filter_statistics = filter_module.print_filter_statistics

# –ò–º–ø–æ—Ä—Ç —Ä–∞–π—Ç–µ—Ä–∞ –¥–ª—è Google Sheets (–æ—á–∏—Å—Ç–∫–∞ –∏ –∑–∞–ø–∏—Å—å)
writer_path = BASE_DIR / 'excel_actions' / 'supplier_stock_ea' / 'google_writer.py'
spec_writer = importlib.util.spec_from_file_location("google_writer", str(writer_path))
writer_module = importlib.util.module_from_spec(spec_writer)
spec_writer.loader.exec_module(writer_module)
clear_target_cells = writer_module.clear_target_cells
write_per_warehouse_and_totals = writer_module.write_per_warehouse_and_totals


def _mask_api_key(value: Optional[str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –ª–æ–≥–æ–≤."""
    if not value:
        return "<empty>"
    v = str(value)
    if len(v) <= 12:
        return "***"
    return f"{v[:12]}...{v[-12:]}"


def _default_date_from_msk_minus_3_months() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–µ–≥–æ–¥–Ω—è (–ú–°–ö) –º–∏–Ω—É—Å 3 –º–µ—Å—è—Ü–∞, —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD."""
    try:
        from zoneinfo import ZoneInfo  # Python 3.9+
        now_msk = datetime.now(ZoneInfo("Europe/Moscow"))
        return (now_msk - timedelta(days=90)).date().isoformat()
    except Exception:
        # –§–æ–ª–±—ç–∫ –Ω–∞ UTC, –µ—Å–ª–∏ zoneinfo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return (datetime.utcnow() - timedelta(days=90)).date().isoformat()


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Fetch supplier stocks from Wildberries Statistics API")
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é None, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å —Ä—É—á–Ω–æ–π MANUAL_DATE_FROM
    parser.add_argument("--date-from", dest="date_from", default=None, help="RFC3339 dateFrom in MSK")
    parser.add_argument("--max-pages", dest="max_pages", type=int, default=None, help="Limit number of pages for testing")
    parser.add_argument("--no-throttle", dest="no_throttle", action="store_true", help="Disable 1/min throttle (NOT recommended)")
    return parser.parse_args()


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –û–¢–ö–õ–Æ–ß–ï–ù–ê."""
    print("=" * 80)
    print("‚ö†Ô∏è  –§–£–ù–ö–¶–ò–Ø SUPPLIER_STOCK –û–¢–ö–õ–Æ–ß–ï–ù–ê")
    print("=" * 80)
    print()
    print("üìã –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    print("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ warehouse_remains API")
    print("–≤–º–µ—Å—Ç–æ supplier_stocks (Statistics API)")
    print()
    print("üîÑ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ warehouse_remains –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º:")
    print("   python3 WB/main_function/warehouse_remains_mf/warehouse_remains.py")
    print()
    print("2. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å supplier_stock:")
    print("   - –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: WB/main_function/supplier_stock_mf/supplier_stock.py")
    print("   - –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é main()")
    print("   - –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
    print("   - –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É —Ñ—É–Ω–∫—Ü–∏–∏")
    print()
    print("3. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:")
    print("   - –£–¥–∞–ª–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª")
    print("   - –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ MAIN_FUNCTIONS.md")
    print()
    print("üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê WAREHOUSE_REMAINS:")
    print("‚Ä¢ –ë–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("‚Ä¢ –õ—É—á—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π API")
    print("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞")
    print()
    print("=" * 80)
    print("üõë –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
    print("=" * 80)
    return


if __name__ == "__main__":
    main()



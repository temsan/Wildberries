"""
–§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ discounts_prices API.

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–≤–µ—Ç–∞ (data, error, errorText, analysis, metadata)
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã data.listGoods
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤ (nmID, vendorCode, prices, etc.)
4. –ì–∏–±–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π null –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö —Å–∫–∏–¥–æ–∫
5. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (competitivePrice, isCompetitivePrice, promotions)
"""

import json
import sys
from pathlib import Path
from typing import Any, Dict, List
import importlib.util

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º schema_utils –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –ø—É—Ç–∏
_SCHEMAS_DIR = Path(__file__).resolve().parents[1] / "utils" / "schemas"
_SCHEMA_UTILS_PATH = _SCHEMAS_DIR / "schema_utils.py"
_spec = importlib.util.spec_from_file_location("schema_utils", str(_SCHEMA_UTILS_PATH))
schema_utils = importlib.util.module_from_spec(_spec)
assert _spec and _spec.loader
_spec.loader.exec_module(schema_utils)  # type: ignore[attr-defined]

load_json = schema_utils.load_json
validate_flexible_type = schema_utils.validate_flexible_type
infer_discounts_response_schema = schema_utils.infer_discounts_response_schema
infer_discounts_data_schema = schema_utils.infer_discounts_data_schema
infer_discounts_listGoods_schema = schema_utils.infer_discounts_listGoods_schema
diff_schemas = schema_utils.diff_schemas


def validate_response_structure(response_data: Dict[str, Any]) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–≤–µ—Ç–∞.
    
    Args:
        response_data: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
        
    Returns:
        tuple[bool, str]: (True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)
    """
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Å—Ö–µ–º—É
    schema_path = Path(__file__).parent.parent / "utils" / "schemas" / "discounts_prices.schema.json"
    schema = load_json(str(schema_path))
    expected_structure = schema["response_structure"]
    
    errors = []
    actual_keys = set(response_data.keys())
    expected_keys = set(expected_structure.keys())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    missing_keys = expected_keys - actual_keys
    if missing_keys:
        errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {', '.join(sorted(missing_keys))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏
    extra_keys = actual_keys - expected_keys
    if extra_keys:
        errors.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–ª—é—á–∏: {', '.join(sorted(extra_keys))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    type_errors = []
    for key, expected_type in expected_structure.items():
        if key in response_data:
            actual_type = type(response_data[key]).__name__
            if expected_type == "dict" and actual_type != "dict":
                type_errors.append(f"'{key}': –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
            elif expected_type == "list" and actual_type != "list":
                type_errors.append(f"'{key}': –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
            elif expected_type in ["bool", "str"] and actual_type != expected_type:
                type_errors.append(f"'{key}': –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
    
    if type_errors:
        errors.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
        for error in type_errors:
            errors.append(f"  ‚Ä¢ {error}")
    
    if errors:
        return False, "\n".join(errors)
    
    return True, ""


def validate_data_structure(data: Dict[str, Any]) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä–µ–∫—Ç–∞ data.
    
    Args:
        data: –û–±—ä–µ–∫—Ç data –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
        
    Returns:
        tuple[bool, str]: (True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)
    """
    
    schema_path = Path(__file__).parent.parent / "utils" / "schemas" / "discounts_prices.schema.json"
    schema = load_json(str(schema_path))
    expected_structure = schema["data_structure"]
    
    errors = []
    actual_keys = set(data.keys())
    expected_keys = set(expected_structure.keys())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    missing_keys = expected_keys - actual_keys
    if missing_keys:
        errors.append(f"–í –æ–±—ä–µ–∫—Ç–µ data –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏: {', '.join(sorted(missing_keys))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏
    extra_keys = actual_keys - expected_keys
    if extra_keys:
        errors.append(f"–í –æ–±—ä–µ–∫—Ç–µ data –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–ª—é—á–∏: {', '.join(sorted(extra_keys))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    type_errors = []
    for key, expected_type in expected_structure.items():
        if key in data:
            actual_type = type(data[key]).__name__
            if expected_type == "list" and actual_type != "list":
                type_errors.append(f"'{key}': –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
    
    if type_errors:
        errors.append("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç–µ data:")
        for error in type_errors:
            errors.append(f"  ‚Ä¢ {error}")
    
    if errors:
        return False, "\n".join(errors)
    
    return True, ""


def validate_critical_fields(item: Dict[str, Any], item_index: int = 0) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ (–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ).
    
    Args:
        item: –¢–æ–≤–∞—Ä –∏–∑ listGoods
        item_index: –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        
    Returns:
        tuple[bool, str]: (True –µ—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö)
    """
    
    schema_path = Path(__file__).parent.parent / "utils" / "schemas" / "discounts_prices.schema.json"
    schema = load_json(str(schema_path))
    critical_fields = schema["listGoods_item_critical"]
    
    errors = []
    
    for field, expected_type in critical_fields.items():
        if field not in item:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º
            if expected_type.startswith("optional_"):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            else:
                errors.append(f"–¢–æ–≤–∞—Ä {item_index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ '{field}'")
                continue
        
        value = item[field]
        if not validate_flexible_type(value, expected_type):
            actual_type = type(value).__name__ if value is not None else 'null'
            errors.append(f"–¢–æ–≤–∞—Ä {item_index}: –ø–æ–ª–µ '{field}' –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {actual_type}")
    
    if errors:
        return False, "\n".join(errors)
    
    return True, ""


def validate_optional_fields(item: Dict[str, Any]) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ (–Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ).
    
    Args:
        item: –¢–æ–≤–∞—Ä –∏–∑ listGoods
        
    Returns:
        List[str]: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    
    schema_path = Path(__file__).parent.parent / "utils" / "schemas" / "discounts_prices.schema.json"
    schema = load_json(str(schema_path))
    optional_fields = schema["listGoods_item_optional"]
    
    warnings = []
    
    for field, expected_type in optional_fields.items():
        if field in item:
            value = item[field]
            if not validate_flexible_type(value, expected_type):
                warnings.append(f"–ü–æ–ª–µ '{field}' –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–µ—Ç—Å—è {expected_type}, –ø–æ–ª—É—á–µ–Ω {type(value).__name__ if value is not None else 'null'}")
    
    return warnings


def handle_structure_change(changes_info: str = "", interactive: bool = False) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å.
    
    Args:
        changes_info: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, False –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    """
    print("\n" + "=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç—á—ë—Ç–∞ discounts_prices")
    print("=" * 80)
    
    if changes_info:
        print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–ú–ï–ù–ï–ù–ò–Ø–•:")
        print("-" * 60)
        print(changes_info)
        print("-" * 60)
    
    print("\nüìã –ß–¢–û –≠–¢–û –û–ó–ù–ê–ß–ê–ï–¢:")
    print("‚Ä¢ Wildberries –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç API")
    print("‚Ä¢ –î–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ")
    print("‚Ä¢ –ò–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—è—Ö")
    print("‚Ä¢ –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    if not interactive:
        print("\n‚öôÔ∏è –ù–µ–π–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏)")
        return True
    
    print("\nü§î –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï?")
    print("1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ - –º–æ–≥—É—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∏)")
    print("2. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥)")
    
    while True:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏–ª–∏ 2): ").strip()
        if choice == "1":
            print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!")
            return True
        if choice == "2":
            print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("üí° –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            return False
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")


def check_and_validate_structure(response_data: Dict[str, Any], *, interactive: bool = False) -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã discounts_prices.
    
    Args:
        response_data: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API discounts_prices
        
    Returns:
        bool: True –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞ discounts_prices...")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    is_valid, error_info = validate_response_structure(response_data)
    if not is_valid:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç–≤–µ—Ç–∞")
        return handle_structure_change(error_info, interactive=interactive)
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã data
    if "data" not in response_data:
        error_info = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'data' –≤ –æ—Ç–≤–µ—Ç–µ"
        print(f"\n‚ùå {error_info}")
        return handle_structure_change(error_info, interactive=interactive)
    
    is_valid, error_info = validate_data_structure(response_data["data"])
    if not is_valid:
        print("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ–±—ä–µ–∫—Ç–∞ data")
        return handle_structure_change(error_info, interactive=interactive)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ listGoods
    listGoods = response_data["data"]["listGoods"]
    if not isinstance(listGoods, list):
        error_info = "–ü–æ–ª–µ 'listGoods' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º (list), –ø–æ–ª—É—á–µ–Ω " + type(listGoods).__name__
        print(f"\n‚ùå {error_info}")
        return handle_structure_change(error_info)
    
    if not listGoods:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ‚Äî –Ω–µ—á–µ–≥–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å")
        return True
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    critical_errors = []
    optional_warnings = []
    
    for i, item in enumerate(listGoods):
        if not isinstance(item, dict):
            critical_errors.append(f"–¢–æ–≤–∞—Ä {i}: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º (dict), –ø–æ–ª—É—á–µ–Ω {type(item).__name__}")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        is_valid, error_info = validate_critical_fields(item, i)
        if not is_valid:
            critical_errors.append(error_info)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        warnings = validate_optional_fields(item)
        if warnings:
            optional_warnings.extend([f"–¢–æ–≤–∞—Ä {i}: {w}" for w in warnings])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    if critical_errors:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–æ–≤–∞—Ä–æ–≤:")
        error_info = "\n".join(critical_errors)
        print(error_info)
        return handle_structure_change(error_info, interactive=interactive)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è - –≤—ã–≤–æ–¥–∏–º –∏—Ö, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    if optional_warnings:
        print("\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):")
        for warning in optional_warnings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            print(f"  ‚Ä¢ {warning}")
        if len(optional_warnings) > 10:
            print(f"  ... –∏ –µ—â—ë {len(optional_warnings) - 10} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    return True

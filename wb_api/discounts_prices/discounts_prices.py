"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Wildberries API: discounts-prices
–ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã–π —Å –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã seller.wildberries.ru

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–∫—Ä–∞—Ç–∫–æ):
- –≠–Ω–¥–ø–æ–∏–Ω—Ç: https://discounts-prices.wildberries.ru/ns/dp-api/discounts-prices/suppliers/api/v1/list/goods/filter
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: authorizev3 header (JWT —Ç–æ–∫–µ–Ω –∏–∑ –≤–µ–±-—Å–µ—Å—Å–∏–∏)
- –ö—É–∫–∏: wbx-validation-key, x-supplier-id-external –∏ –¥—Ä—É–≥–∏–µ
- –ú–µ—Ç–æ–¥: POST —Å JSON —Ç–µ–ª–æ–º
- –õ–∏–º–∏—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 1+ —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

from __future__ import annotations

import json
import time
from pathlib import Path
from typing import Any, Dict, List, Optional

import requests

# –ò–º–ø–æ—Ä—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –µ–¥–∏–Ω–æ–≥–æ api_keys.py (–∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞)
from pathlib import Path as _Path
import importlib.util as _importlib_util

_api_keys_path = _Path(__file__).resolve().parents[2] / "api_keys.py"
_spec = _importlib_util.spec_from_file_location("api_keys", str(_api_keys_path))
_api_keys = _importlib_util.module_from_spec(_spec)
assert _spec and _spec.loader
_spec.loader.exec_module(_api_keys)
AUTHORIZEV3_TOKEN, COOKIES, USER_AGENT = (
    _api_keys.AUTHORIZEV3_TOKEN,
    _api_keys.COOKIES,
    _api_keys.USER_AGENT,
)


class WBDiscountsPricesClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å–∫–∏–¥–∫–∞–º –∏ —Ü–µ–Ω–∞–º."""

    def __init__(
        self,
        authorizev3_token: Optional[str] = None,
        cookies: Optional[str] = None,
        user_agent: Optional[str] = None
    ):
        """
        Args:
            authorizev3_token: JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ authorizev3 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ auth_config.py)
            cookies: –°—Ç—Ä–æ–∫–∞ —Å –∫—É–∫–∞–º–∏ –∏–∑ cURL –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ auth_config.py)
            user_agent: User-Agent –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ auth_config.py)
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ auth_config.py –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —è–≤–Ω–æ
        self.authorizev3_token = authorizev3_token or AUTHORIZEV3_TOKEN
        self.cookies = cookies or COOKIES
        self.base_url = "https://discounts-prices.wildberries.ru/ns/dp-api/discounts-prices/suppliers/api/v1/list/goods/filter"
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ cURL
        self.headers = {
            "accept": "*/*",
            "accept-language": "ru",
            "authorizev3": self.authorizev3_token,
            "content-type": "application/json",
            "origin": "https://seller.wildberries.ru",
            "priority": "u=1, i",
            "referer": "https://seller.wildberries.ru/",
            "root-version": "v1.57.3",
            "sec-ch-ua": '"Not;A=Brand";v="99", "Google Chrome";v="139", "Chromium";v="139"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"macOS"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-site",
            "user-agent": user_agent or USER_AGENT
        }

    def _parse_cookies(self) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∫—É–∫ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è requests."""
        cookies_dict = {}
        for cookie in self.cookies.split('; '):
            if '=' in cookie:
                key, value = cookie.split('=', 1)
                cookies_dict[key] = value
        return cookies_dict

    def fetch_goods_filtered(
        self,
        limit: int = 50,
        offset: int = 0,
        facets: Optional[List] = None,
        filter_without_price: bool = False,
        filter_with_leftovers: bool = False,
        filter_without_competitive_price: bool = False,
        sort: str = "price",
        sort_order: int = 0,
        timeout: int = 60
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.

        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
            facets: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π)
            filter_without_price: –§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω—ã
            filter_with_leftovers: –§–∏–ª—å—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
            filter_without_competitive_price: –§–∏–ª—å—Ç—Ä –±–µ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö —Ü–µ–Ω
            sort: –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "price")
            sort_order: –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (0 - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é, 1 - –ø–æ —É–±—ã–≤–∞–Ω–∏—é)
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º API
        """
        if facets is None:
            facets = []

        payload = {
            "limit": limit,
            "offset": offset,
            "facets": facets,
            "filterWithoutPrice": filter_without_price,
            "filterWithLeftovers": filter_with_leftovers,
            "filterWithoutCompetitivePrice": filter_without_competitive_price,
            "sort": sort,
            "sortOrder": sort_order
        }

        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                cookies=self._parse_cookies(),
                json=payload,
                timeout=timeout
            )
            
            response.raise_for_status()
            return response.json()
            
        except requests.exceptions.HTTPError as e:
            print(f"HTTP error: {e}")
            print(f"Response status code: {response.status_code}")
            print(f"Response text: {response.text}")
            raise
        except requests.exceptions.RequestException as e:
            print(f"Request error: {e}")
            raise

    def iterate_all_goods(
        self,
        *,
        page_size: int = 50,
        sleep_seconds: float = 1.0,
        max_pages: Optional[int] = None,
        **filter_params
    ) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

        Args:
            page_size: –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            sleep_seconds: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
            **filter_params: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        """
        all_goods: List[Dict[str, Any]] = []
        offset = 0
        page_count = 0
        consecutive_empty_pages = 0

        print(f"üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_size}, –∑–∞–¥–µ—Ä–∂–∫–∞ {sleep_seconds}—Å")
        if max_pages:
            print(f"üî¢ –õ–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages}")

        while True:
            if max_pages is not None and page_count >= max_pages:
                print(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü: {max_pages}")
                break

            try:
                print(f"üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count + 1} (offset={offset})...")
                data = self.fetch_goods_filtered(
                    limit=page_size,
                    offset=offset,
                    **filter_params
                )
            except requests.HTTPError as e:
                if e.response.status_code == 401:
                    print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    break
                elif e.response.status_code == 429:
                    print("‚è≥ Rate limit: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –∂–¥–µ–º...")
                    time.sleep(sleep_seconds * 2)
                    continue
                raise

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
            goods = data.get("data", {}).get("listGoods", []) if isinstance(data, dict) else []
            
            if not goods:
                consecutive_empty_pages += 1
                print(f"üì≠ –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_count + 1} (–ø–æ–¥—Ä—è–¥ –ø—É—Å—Ç—ã—Ö: {consecutive_empty_pages})")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 3 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä—è–¥, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if consecutive_empty_pages >= 3:
                    print("üõë –ü–æ–ª—É—á–µ–Ω–æ 3 –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ä—è–¥, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                    break
            else:
                consecutive_empty_pages = 0
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(goods)}")

            all_goods.extend(goods)
            page_count += 1
            offset += page_size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
            if len(goods) < page_size:
                print(f"üìÑ –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ ({len(goods)}) —á–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã ({page_size})")
                print("üèÅ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É")
                break

            time.sleep(sleep_seconds)

        print(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {page_count} —Å—Ç—Ä–∞–Ω–∏—Ü, {len(all_goods)} —Ç–æ–≤–∞—Ä–æ–≤")
        return all_goods

    def save_response_to_file(self, response_data: Dict[str, Any], filename: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç API –≤ JSON —Ñ–∞–π–ª."""
        output_path = Path(__file__).resolve().parents[1] / filename
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(response_data, f, ensure_ascii=False, indent=2)
        print(f"–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_path}")


def test_pagination():
    """–¢–µ—Å—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö."""
    print("=" * 60)
    print("üß™ –¢–ï–°–¢ –ü–ê–ì–ò–ù–ê–¶–ò–ò –ò –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    client = WBDiscountsPricesClient()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã...")
        all_goods = client.iterate_all_goods(
            page_size=50,
            sleep_seconds=1.0
        )
        
        print("\n" + "=" * 60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ì–ò–ù–ê–¶–ò–ò")
        print("=" * 60)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü
        total_goods = len(all_goods)
        page_size = 50
        total_pages = (total_goods + page_size - 1) // page_size  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
        
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_size} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
        print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_goods}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Ç–æ–≤–∞—Ä–æ–≤ (subject)
        subjects = {}
        brands = {}
        
        for good in all_goods:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã —Ç–æ–≤–∞—Ä–æ–≤
            subject = good.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
            subjects[subject] = subjects.get(subject, 0) + 1
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã
            brand = good.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
            brands[brand] = brands.get(brand, 0) + 1
        
        print(f"\nüìÇ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–õ–ê–°–°–´ –¢–û–í–ê–†–û–í ({len(subjects)}):")
        print("-" * 40)
        for subject, count in sorted(subjects.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_goods) * 100
            print(f"  ‚Ä¢ {subject}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%)")
        
        print(f"\nüè∑Ô∏è  –ë–†–ï–ù–î–´ ({len(brands)}):")
        print("-" * 40)
        for brand, count in sorted(brands.items(), key=lambda x: x[1], reverse=True):
            percentage = (count / total_goods) * 100
            print(f"  ‚Ä¢ {brand}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∏–¥–∫–∏
        discounts = [good.get('discount', 0) for good in all_goods if good.get('discount') is not None]
        if discounts:
            avg_discount = sum(discounts) / len(discounts)
            min_discount = min(discounts)
            max_discount = max(discounts)
            
            print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –°–ö–ò–î–û–ö:")
            print("-" * 40)
            print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {avg_discount:.1f}%")
            print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {min_discount}%")
            print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {max_discount}%")
            print(f"  ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: {len(discounts)} –∏–∑ {total_goods}")
        
        print(f"\n‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {total_goods / total_pages:.1f} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        
        return all_goods
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return []


if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    client = WBDiscountsPricesClient()

    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    all_goods = client.iterate_all_goods(
        page_size=50,
        sleep_seconds=1.0
    )

    print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(all_goods)} —Ç–æ–≤–∞—Ä–æ–≤")
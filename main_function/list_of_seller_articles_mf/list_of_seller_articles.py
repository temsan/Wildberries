"""
Main: —Å–±–æ—Ä –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Content API (cards list) –∏ upsert –≤ Google Sheets.

–ü–æ–ª—è: nmID | barcode (–∏–∑ sizes[].skus) | vendorCode | size
–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–µ—Ç–≤–µ—Ä–∫–µ. –ï—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∏ (nmID, barcode), –Ω–æ vendorCode –∏–ª–∏ size –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –º–µ—Å—Ç–µ.
–ù–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∏ –∫—Ä–∞—Å–∏–º —Å–≤–µ—Ç–ª–æ‚Äë—Å–µ—Ä—ã–º.
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã (vendorCode, nmID) –≤ —Å—Ç–æ–ª–±—Ü—ã H –∏ I.
"""

from __future__ import annotations

from pathlib import Path
import importlib.util


BASE_DIR = Path(__file__).resolve().parents[2]

# –ò–º–ø–æ—Ä—Ç API –¥–ª—è Content (cards list)
content_api_path = BASE_DIR / 'wb_api' / 'content_cards.py'
spec = importlib.util.spec_from_file_location('content_cards', str(content_api_path))
content_mod = importlib.util.module_from_spec(spec)
spec.loader.exec_module(content_mod)
WBContentCardsClient = content_mod.WBContentCardsClient

# –ö–ª—é—á–∏/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
api_keys_path = BASE_DIR / 'api_keys.py'
spec_keys = importlib.util.spec_from_file_location('api_keys', str(api_keys_path))
ak = importlib.util.module_from_spec(spec_keys)
spec_keys.loader.exec_module(ak)
API_KEY = ak.WB_API_TOKEN
SHEET_ID = ak.GOOGLE_SHEET_ID_ARTICLES

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
norm_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'normalize_articles.py'
spec_norm = importlib.util.spec_from_file_location('normalize_articles', str(norm_path))
norm = importlib.util.module_from_spec(spec_norm)
spec_norm.loader.exec_module(norm)
extract_triples_from_content_cards = norm.extract_triples_from_content_cards

# Google Sheets read/upsert
gs_read_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'gs_read_existing.py'
spec_read = importlib.util.spec_from_file_location('gs_read_existing', str(gs_read_path))
gs_read = importlib.util.module_from_spec(spec_read)
spec_read.loader.exec_module(gs_read)
read_existing_keys = gs_read.read_existing_keys

gs_upsert_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'gs_upsert_append.py'
spec_upsert = importlib.util.spec_from_file_location('gs_upsert_append', str(gs_upsert_path))
gs_upsert = importlib.util.module_from_spec(spec_upsert)
spec_upsert.loader.exec_module(gs_upsert)
upsert_articles = gs_upsert.upsert_articles

# ========================================
# üîß –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø (–ù–ê–°–¢–†–û–ô–ö–ò –í –ú–ï–ô–ù–ï)
# ========================================
# –£–∫–∞–∂–∏—Ç–µ nmID, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –ù–£–ñ–ù–û –¥–æ–±–∞–≤–ª—è—Ç—å/–æ–±–Ω–æ–≤–ª—è—Ç—å –≤ –±–∞–∑–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
# –¢—Ä–æ–π–∫–∏ (nmID, barcode, vendorCode) —Å —ç—Ç–∏–º–∏ nmID –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.
EXCLUDED_NM_IDS = {}
    # –ü—Ä–∏–º–µ—Ä: 12345678

# Structure validator (strict top-level) via dynamic import
struct_path = BASE_DIR / 'excel_actions' / 'list_of_seller_articles_ea' / 'structure_validator.py'
spec_struct = importlib.util.spec_from_file_location('articles_structure_validator', str(struct_path))
articles_struct = importlib.util.module_from_spec(spec_struct)
spec_struct.loader.exec_module(articles_struct)
articles_check_and_validate_structure = articles_struct.check_and_validate_structure


def main() -> None:
    print("üöÄ –°—Ç–∞—Ä—Ç —Å–±–æ—Ä–∫–∏ –±–∞–∑—ã –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (Content API)")
    client = WBContentCardsClient(API_KEY)
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–æ–π API –∏ –∫–∞–∫–æ–π –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è (–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ)
    def _mask(v: str) -> str:
        if not v:
            return "<empty>"
        return (v[:12] + "..." + v[-12:]) if len(v) > 24 else "***"
    print(f"Using API endpoint: {client.base_url}")
    print(f"Using API key (masked): {_mask(API_KEY)}")

# 1) –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    #data = client.fetch_cards_page(limit=100, with_photo=-1, locale="ru")
    #rows = data.get('cards', []) if isinstance(data, dict) else []

    # 1) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    rows = client.iterate_all_cards(limit=100, with_photo=-1, locale="ru")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –Ω–∞—à–µ–º—É —Å—Ç—Ä–æ–≥–æ–º—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—É
    if not articles_check_and_validate_structure(rows):
        print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return
    if not rows:
        print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ cards")
        return

    # 3) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–µ—Ç–≤–µ—Ä–æ–∫ –∏ –ø–∞—Ä
    items, vendor_nmid_pairs = extract_triples_from_content_cards(rows)
    if EXCLUDED_NM_IDS:
        before = len(items)
        items = [t for t in items if t[0] not in EXCLUDED_NM_IDS]
        vendor_nmid_pairs = [p for p in vendor_nmid_pairs if p[1] not in EXCLUDED_NM_IDS]
        after = len(items)
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏—è nmID: {len(EXCLUDED_NM_IDS)}; –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {before - after} —á–µ—Ç–≤–µ—Ä–æ–∫")
    print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–µ—Ç–≤–µ—Ä–æ–∫: {len(items)} (nmID, barcode, vendorCode, size)")
    print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä: {len(vendor_nmid_pairs)} (vendorCode, nmID)")

    # 4) –ß–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ Google Sheets
    sheet_name = "–ë–∞–∑–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤"
    start_row = 2
    existing = read_existing_keys(SHEET_ID, sheet_name, start_row=start_row)
    print(f"–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫: {len(existing)}")

    # 5) Upsert: –æ–±–Ω–æ–≤–∏—Ç—å supplierArticle –ø–æ (nmId, barcode); –Ω–æ–≤—ã–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –∏ –ø–æ–∫—Ä–∞—Å–∏—Ç—å
    # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã (vendorCode, nmID) –≤ —Å—Ç–æ–ª–±—Ü—ã H –∏ I
    upsert_articles(SHEET_ID, sheet_name, start_row, existing, items)
    print("‚úÖ –ì–æ—Ç–æ–≤–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, –ø–∞—Ä—ã vendorCode-nmID –∑–∞–ø–∏—Å–∞–Ω—ã.")


if __name__ == "__main__":
    main()



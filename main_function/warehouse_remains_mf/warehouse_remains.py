"""
–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–æ–≤ warehouse_remains.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, –∞–≥—Ä–µ–≥–∞—Ü–∏—é –∏ –∑–∞–ø–∏—Å—å –≤ Google Sheets.
"""

import sys
import json
import importlib.util
from pathlib import Path

# –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parents[2]

# –ò–º–ø–æ—Ä—Ç API –∫–ª–∏–µ–Ω—Ç–∞
wb_api_path = BASE_DIR / 'wb_api' / 'warehouse_remains.py'
spec = importlib.util.spec_from_file_location("warehouse_remains", str(wb_api_path))
warehouse_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(warehouse_module)
WildberriesWarehouseAPI = warehouse_module.WildberriesWarehouseAPI

# –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
structure_validator_path = BASE_DIR / 'excel_actions' / 'warehouse_remains_ea' / 'structure_validator.py'
spec = importlib.util.spec_from_file_location("structure_validator", str(structure_validator_path))
validator_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(validator_module)
check_and_validate_structure = validator_module.check_and_validate_structure

# –ò–º–ø–æ—Ä—Ç –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
data_aggregator_path = BASE_DIR / 'excel_actions' / 'warehouse_remains_ea' / 'data_aggregator.py'
spec = importlib.util.spec_from_file_location("data_aggregator", str(data_aggregator_path))
aggregator_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(aggregator_module)
aggregate_warehouse_remains = aggregator_module.aggregate_warehouse_remains
print_aggregation_sample = aggregator_module.print_aggregation_sample
print_warehouse_statistics = aggregator_module.print_warehouse_statistics

# –ò–º–ø–æ—Ä—Ç Google Sheets writer
google_sheets_writer_path = BASE_DIR / 'excel_actions' / 'warehouse_remains_ea' / 'google_sheets_writer.py'
spec = importlib.util.spec_from_file_location("google_sheets_writer", str(google_sheets_writer_path))
writer_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(writer_module)
write_warehouse_remains_to_sheets = writer_module.write_warehouse_remains_to_sheets

# –ò–º–ø–æ—Ä—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
data_validator_path = BASE_DIR / 'excel_actions' / 'warehouse_remains_ea' / 'data_validator.py'
spec = importlib.util.spec_from_file_location("data_validator", str(data_validator_path))
data_validator_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(data_validator_module)
validate_warehouse_remains_data = data_validator_module.validate_warehouse_remains_data

# –ò–º–ø–æ—Ä—Ç API –∫–ª—é—á–µ–π
api_keys_path = BASE_DIR / 'api_keys.py'
spec = importlib.util.spec_from_file_location("api_keys", str(api_keys_path))
api_keys_module = importlib.util.module_from_spec(spec)
spec.loader.exec_module(api_keys_module)
API_KEY = api_keys_module.WB_API_TOKEN
GOOGLE_SHEET_ID = api_keys_module.GOOGLE_SHEET_ID


def show_api_key_mask(api_key: str) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Å–∫—É API –∫–ª—é—á–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    
    Args:
        api_key: API –∫–ª—é—á –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    if not api_key:
        print("üîë API –∫–ª—é—á: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    if len(api_key) > 30:
        masked_key = f"{api_key[:20]}...{api_key[-10:]}"
    else:
        masked_key = f"{api_key[:10]}...{api_key[-5:]}"
    
    print(f"üîë API –∫–ª—é—á: {masked_key}")


def load_test_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.
    
    Returns:
        List[Dict]: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ warehouse_remains
    """
    test_data_path = BASE_DIR / 'wb_api' / 'warehouse_remains_response.json'
    
    if not test_data_path.exists():
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_data_path}")
        return None
    
    try:
        with open(test_data_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è warehouse_remains —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π.
    
    –ü—Ä–æ—Ü–µ—Å—Å:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API (–∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö)
    2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ barcode
    4. –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    5. –ó–∞–ø–∏—Å—å –≤ Google Sheets
    """
    print("üöÄ –ó–ê–ü–£–°–ö WAREHOUSE_REMAINS - –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
    print("=" * 70)
    print()
    
    # ========================================
    # üîß –ù–ê–°–¢–†–û–ô–ö–ò (–ø–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
    # ========================================
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API –∫–ª—é—á
    print("üìã –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    show_api_key_mask(API_KEY)
    print(f"üìä Google Sheet ID: {GOOGLE_SHEET_ID}")
    print()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    SHEET_NAME = "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Å–∫–ª–∞–¥–∞–º"  # ‚ö†Ô∏è –ü–û–î–°–¢–ê–í–¨–¢–ï –ù–ê–ó–í–ê–ù–ò–ï –õ–ò–°–¢–ê
    USE_TEST_DATA = False  # ‚ö†Ô∏è True = —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, False = —Ä–µ–∞–ª—å–Ω—ã–π API
    
    print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞: {SHEET_NAME}")
    print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {USE_TEST_DATA}")
    print()
    
    # ========================================
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ warehouse_remains...")
    
    if USE_TEST_DATA:
        print("üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        report_data = load_test_data()
        if not report_data:
            return
    else:
        print("üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API")
        try:
            api = WildberriesWarehouseAPI(API_KEY)
            report_data = api.get_warehouse_remains()
            
            if not report_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
                return
                
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(report_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: {e}")
            return
    
    print()
    
    # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    print("2Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not check_and_validate_structure(report_data):
        print("üõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    print()
    
    # 3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ barcode
    print("3Ô∏è‚É£ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ barcode...")
    aggregated_data = aggregate_warehouse_remains(report_data)
    
    if not aggregated_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    print()
    
    # 4. –í—ã–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("4Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print_aggregation_sample(aggregated_data, count=3)
    print()
    
    # 5. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∫–ª–∞–¥–∞–º
    print("5Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–ª–∞–¥–∞–º:")
    print_warehouse_statistics(aggregated_data)
    print()
    
    # 6. –ó–∞–ø–∏—Å—å –≤ Google Sheets
    print("6Ô∏è‚É£ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets...")
    sheet_url = f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEET_ID}/edit"
    
    try:
        write_warehouse_remains_to_sheets(sheet_url, SHEET_NAME, aggregated_data)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    print()
    
    # 7. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("7Ô∏è‚É£ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    try:
        validation_success = validate_warehouse_remains_data(sheet_url, SHEET_NAME, aggregated_data)
        if validation_success:
            print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
    
    print()
    print("üéâ WAREHOUSE_REMAINS –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("=" * 70)


def test_validation_only():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò")
    print("=" * 40)
    
    data = load_test_data()
    if not data:
        return
    
    print("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...")
    result = check_and_validate_structure(data)
    
    if result:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")


def test_aggregation_only():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ì–†–ï–ì–ê–¶–ò–ò")
    print("=" * 40)
    
    data = load_test_data()
    if not data:
        return
    
    print("üìä –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é...")
    aggregated_data = aggregate_warehouse_remains(data)
    
    print(f"‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(aggregated_data)} barcode")
    print_aggregation_sample(aggregated_data, count=3)
    print_warehouse_statistics(aggregated_data)


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "test-validation":
            test_validation_only()
        elif sys.argv[1] == "test-aggregation":
            test_aggregation_only()
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python warehouse_remains.py                    # –ü–æ–ª–Ω—ã–π –∑–∞–ø—É—Å–∫")
            print("  python warehouse_remains.py test-validation    # –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è")
            print("  python warehouse_remains.py test-aggregation   # –¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è")
    else:
        main()
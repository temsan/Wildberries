"""
Main-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ —á–µ—Ä–µ–∑ discounts-prices API.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
1) –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ WBDiscountsPricesClient (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
2) –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (—Ü–µ–Ω—ã, —Å–∫–∏–¥–∫–∏, –°–ü–ü)
4) –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
5) –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ google_writer.py)
6) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç API —Å —Ç–∞–±–ª–∏—Ü–µ–π)
7) –õ–æ–≥–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å

–ù–ê–°–¢–†–û–ô–ö–ò GOOGLE –¢–ê–ë–õ–ò–¶–´:
- –ù–∞—Ö–æ–¥—è—Ç—Å—è –≤ excel_actions/discounts_prices_ea/google_writer.py
- sheet_name, article_search_range, start_row

–í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–•:
- –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ Google —Ç–∞–±–ª–∏—Ü–µ
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –ø–æ–ª—è: prices, discount, discountedPrices, etc.
- –í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è—Ö

–ó–∞–ø—É—Å–∫:
  python3 WB/main_function/discounts_prices_mf/discounts_prices.py
  python3 WB/main_function/discounts_prices_mf/discounts_prices.py --page-size 100
  python3 WB/main_function/discounts_prices_mf/discounts_prices.py --sleep-seconds 0.5
"""

from __future__ import annotations

import argparse
import json
import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

import importlib.util

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('discounts_prices.log', encoding='utf-8')
        ]
    )
    return logging.getLogger(__name__)

def import_discounts_client():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç WBDiscountsPricesClient."""
    BASE_DIR = Path(__file__).resolve().parents[2]
    discounts_path = BASE_DIR / 'wb_api' / 'discounts_prices' / 'discounts_prices.py'

    spec = importlib.util.spec_from_file_location("discounts_prices", str(discounts_path))
    discounts_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(discounts_module)

    return discounts_module.WBDiscountsPricesClient


def import_api_keys():
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ api_keys.py."""
    BASE_DIR = Path(__file__).resolve().parents[2]
    api_keys_path = BASE_DIR / 'api_keys.py'

    spec = importlib.util.spec_from_file_location("api_keys", str(api_keys_path))
    api_keys_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(api_keys_module)

    return api_keys_module

def import_structure_validator():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞."""
    BASE_DIR = Path(__file__).resolve().parents[2]
    validator_path = BASE_DIR / 'excel_actions' / 'discounts_prices_ea' / 'structure_validator.py'
    
    spec = importlib.util.spec_from_file_location("structure_validator", str(validator_path))
    validator_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(validator_module)
    
    return validator_module.check_and_validate_structure

def import_data_processor():
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
    BASE_DIR = Path(__file__).resolve().parents[2]
    processor_path = BASE_DIR / 'excel_actions' / 'discounts_prices_ea' / 'data_processor.py'
    
    spec = importlib.util.spec_from_file_location("data_processor", str(processor_path))
    processor_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(processor_module)
    
    return processor_module.process_discounts_data, processor_module.get_report_summary

def analyze_goods_data(all_goods: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    total_goods = len(all_goods)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü
    page_size = 50
    total_pages = (total_goods + page_size - 1) // page_size
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã —Ç–æ–≤–∞—Ä–æ–≤ (subject)
    subjects = {}
    brands = {}
    
    for good in all_goods:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞—Å—Å—ã —Ç–æ–≤–∞—Ä–æ–≤
        subject = good.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')
        subjects[subject] = subjects.get(subject, 0) + 1
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã
        brand = good.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
        brands[brand] = brands.get(brand, 0) + 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    subjects_sorted = sorted(subjects.items(), key=lambda x: x[1], reverse=True)
    brands_sorted = sorted(brands.items(), key=lambda x: x[1], reverse=True)
    
    analysis = {
        "pagination": {
            "page_size": page_size,
            "total_pages": total_pages,
            "total_goods": total_goods,
            "efficiency": total_goods / total_pages if total_pages > 0 else 0
        },
        "subjects": {
            "count": len(subjects),
            "data": subjects_sorted
        },
        "brands": {
            "count": len(brands),
            "data": brands_sorted
        }
    }
    
    return analysis

def print_analysis_report(analysis: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    logger = logging.getLogger(__name__)
    
    pagination = analysis["pagination"]
    subjects = analysis["subjects"]
    brands = analysis["brands"]
    
    logger.info(f"üìÇ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–õ–ê–°–°–´ –¢–û–í–ê–†–û–í ({subjects['count']}):")
    logger.info("-" * 40)
    for subject, count in subjects["data"]:
        percentage = (count / pagination['total_goods']) * 100
        logger.info(f"  ‚Ä¢ {subject}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%)")
    
    logger.info(f"\nüè∑Ô∏è  –ë–†–ï–ù–î–´ ({brands['count']}):")
    logger.info("-" * 40)
    for brand, count in brands["data"]:
        percentage = (count / pagination['total_goods']) * 100
        logger.info(f"  ‚Ä¢ {brand}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%)")
    
    logger.info(f"\n‚úÖ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")


def print_processed_data_report(processed_data: List[Dict[str, Any]], summary: Dict[str, Any]):
    """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º."""
    logger = logging.getLogger(__name__)
    
    print("\n" + "=" * 80)
    print("üìä –û–¢–ß–ï–¢ –ü–û –í–´–ü–û–õ–ù–ï–ù–ò–Æ")
    print("=" * 80)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_articles = len(processed_data)
    articles_with_spp = sum(1 for item in processed_data if item['discountOnSite'] > 0)
    articles_with_competitive_price = sum(1 for item in processed_data if item['isCompetitivePrice'] == True)
    articles_with_promotions = sum(1 for item in processed_data if item['hasPromotions'] == True)
    
    print(f"üì¶ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_articles}")
    print(f"üè∑Ô∏è –ò–º–µ—é—Ç –°–ü–ü –±–æ–ª—å—à–µ 0: {articles_with_spp}")
    print(f"üí∞ –°—Ç–∞—Ç—É—Å isCompetitivePrice True: {articles_with_competitive_price}")
    print(f"üéØ –°—Ç–∞—Ç—É—Å hasPromotions True: {articles_with_promotions}")
    
    print("\n" + "=" * 80)
    print("üìÑ –ü–†–ò–ú–ï–†–´ –ü–û –ü–ï–†–í–´–ú –¢–†–ï–ú –ê–†–¢–ò–ö–£–õ–ê–ú")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–æ–≤–∞—Ä–∞
    for i, item in enumerate(processed_data[:3]):
        print(f"\nüîπ –ê—Ä—Ç–∏–∫—É–ª {i+1}:")
        print(f"   nmID: {item['nmID']}")
        print(f"   vendorCode: {item['vendorCode']}")
        print(f"   brand: {item['brand']}")
        print(f"   subject: {item['subject']}")
        print(f"   prices: {item['prices']}")
        print(f"   discountedPrices: {item['discountedPrices']}")
        print(f"   discount: {item['discount']}%")
        print(f"   discountOnSite: {item['discountOnSite']}%")
        print(f"   priceafterSPP: {item['priceafterSPP']}")
        print(f"   competitivePrice: {item['competitivePrice']}")
        print(f"   isCompetitivePrice: {item['isCompetitivePrice']}")
        print(f"   hasPromotions: {item['hasPromotions']}")
    
    print("\n‚úÖ –û–¢–ß–ï–¢ –ü–û –í–´–ü–û–õ–ù–ï–ù–ò–Æ –ó–ê–í–ï–†–®–ï–ù!")

def save_json_response(all_goods: List[Dict[str, Any]], analysis: Dict[str, Any]) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É."""
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
    response_data = {
        "data": {"listGoods": all_goods},
        "error": False,
        "errorText": "",
        "analysis": analysis,
        "metadata": {
            "retrieved_at": datetime.now().isoformat(),
            "total_goods": len(all_goods),
            "api_endpoint": "https://discounts-prices.wildberries.ru/ns/dp-api/discounts-prices/suppliers/api/v1/list/goods/filter"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
    output_path = Path.cwd() / f"discounts_prices_response_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(response_data, f, ensure_ascii=False, indent=2)
    
    logger.info(f"üíæ JSON –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
    logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {output_path.stat().st_size / 1024 / 1024:.1f} MB")
    
    return str(output_path)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(description='–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å–æ —Å–∫–∏–¥–∫–∞–º–∏')
    parser.add_argument('--page-size', type=int, default=50, help='–†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)')
    parser.add_argument('--sleep-seconds', type=float, default=1.0, help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0)')


    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger = setup_logging()

    logger.info("üöÄ –ó–ê–ü–£–°–ö MAIN –§–£–ù–ö–¶–ò–ò DISCOUNTS_PRICES")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ api_keys.py
        api_keys = import_api_keys()

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        logger.info(f"üîë –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {api_keys.AUTHORIZEV3_TOKEN[:50]}...")
        logger.info(f"üç™ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(api_keys.COOKIES)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"üåê User-Agent –∑–∞–≥—Ä—É–∂–µ–Ω: {api_keys.USER_AGENT[:50]}...")
        logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞: {api_keys.GOOGLE_SHEET_ID_UNIT_ECONOMICS}")
        logger.info(f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: –Æ–Ω–∏—Ç–∫–∞")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
        WBDiscountsPricesClient = import_discounts_client()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ api_keys
        client = WBDiscountsPricesClient(
            authorizev3_token=api_keys.AUTHORIZEV3_TOKEN,
            cookies=api_keys.COOKIES,
            user_agent=api_keys.USER_AGENT
        )

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã (–≤—Å–µ–≥–¥–∞ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        logger.info(f"‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: page_size={args.page_size}, sleep_seconds={args.sleep_seconds}")
        logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤...")

        all_goods = client.iterate_all_goods(
            page_size=args.page_size,
            sleep_seconds=args.sleep_seconds,
            max_pages=None  # –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        )
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
        validate_structure = import_structure_validator()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        response_data = {
            "data": {
                "listGoods": all_goods
            },
            "error": False,
            "errorText": "",
            "analysis": {},
            "metadata": {
                "total_goods": len(all_goods),
                "api_endpoint": "https://discounts-prices.wildberries.ru/ns/dp-api/discounts-prices/suppliers/api/v1/list/goods/filter"
            }
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid = validate_structure(response_data)
        
        if not is_valid:
            logger.error("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –ø—Ä–æ—à–ª–∞. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return 1
        
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        logger.info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞...")
        process_data, get_summary = import_data_processor()
        
        processed_data = process_data(all_goods)
        summary = get_summary(processed_data)
        
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {summary['total_items']} —Ç–æ–≤–∞—Ä–æ–≤")
        logger.info(f"üí∞ –° –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π: {summary['items_with_competitive_price']} ({summary['competitive_price_coverage']:.1f}%)")
        logger.info(f"üéØ –° –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è–º–∏: {summary['items_with_promotions']} ({summary['promotions_coverage']:.1f}%)")
        logger.info(f"üè∑Ô∏è –° –°–ü–ü: {summary['items_with_spp']} ({summary['spp_coverage']:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        analysis = analyze_goods_data(all_goods)
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print_analysis_report(analysis)
        
        # –ü–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É
        logger.info("üîÑ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google —Ç–∞–±–ª–∏—Ü—É...")
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º google_writer –∏–∑ excel_actions
            import sys
            from pathlib import Path
            excel_actions_path = Path(__file__).parent.parent.parent / "excel_actions" / "discounts_prices_ea"
            sys.path.append(str(excel_actions_path))

            from google_writer import write_discounts_prices_to_sheet  # type: ignore

            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ api_keys - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É UNIT_ECONOMICS –¥–ª—è discounts_prices
            result = write_discounts_prices_to_sheet(
                processed_data,
                spreadsheet_id=api_keys.GOOGLE_SHEET_ID_UNIT_ECONOMICS,
                credentials_info=api_keys.GOOGLE_CREDENTIALS_INFO
            )

            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ Google —Ç–∞–±–ª–∏—Ü—É –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {result['processed_rows']}")
            logger.info(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {result['not_found_articles']}")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É (–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞): {e}")
            logger.info("üìã –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            import traceback
            logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö...")
        try:
            from data_validator import validate_data_integrity, print_validation_report  # type: ignore

            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ api_keys –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É UNIT_ECONOMICS –¥–ª—è discounts_prices
            validation_result = validate_data_integrity(
                processed_data,
                spreadsheet_id=api_keys.GOOGLE_SHEET_ID_UNIT_ECONOMICS,
                credentials_info=api_keys.GOOGLE_CREDENTIALS_INFO
            )
            print_validation_report(validation_result)

            if validation_result['validation_passed']:
                logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã—è–≤–∏–ª–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è!")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö (–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞): {e}")
            logger.info("üìã –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç - –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            import traceback
            logger.info(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        logger.info("\nüéâ MAIN –§–£–ù–ö–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)

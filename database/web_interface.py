"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î Wildberries (Streamlit).
–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: python database/web_interface.py
"""

# =============================================================================
# –ü–†–û–í–ï–†–ö–ê –ò –ê–í–¢–û–ó–ê–ü–£–°–ö STREAMLIT
# =============================================================================
import sys
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ streamlit
if __name__ == "__main__" and "streamlit.runtime.scriptrunner" not in sys.modules:
    import subprocess
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ—Ä–µ–∑ Streamlit...")
    print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8501")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º streamlit run –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
        subprocess.run([sys.executable, "-m", "streamlit", "run", __file__], check=True)
    except KeyboardInterrupt:
        print("\nüëã –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Streamlit: pip install streamlit")
    
    sys.exit(0)

# =============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–û–î –ò–ù–¢–ï–†–§–ï–ô–°–ê (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ streamlit run)
# =============================================================================
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.db_client import get_client
from database.integrations.content_cards_db import sync_content_cards_to_db
from database.integrations.discounts_prices_db import sync_discounts_prices_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="WB API Dashboard",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ - —á–∏—Å—Ç—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω
st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω */
    .stApp {
        background-color: #f8f9fa;
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    [data-testid="stSidebar"] {
        background-color: #ffffff;
        border-right: 1px solid #e0e0e0;
    }
    
    /* –£–±–∏—Ä–∞–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
    [data-testid="stSidebar"] [role="radiogroup"] {
        display: none;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="stMetricValue"] {
        font-size: 1.8rem;
        font-weight: 600;
    }
    
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton > button {
        border-radius: 6px;
        border: 1px solid #e0e0e0;
        background-color: white;
        color: #333;
        font-weight: 500;
    }
    
    .stButton > button:hover {
        border-color: #4285f4;
        color: #4285f4;
    }
    
    /* –¢–∞–±–ª–∏—Ü—ã */
    [data-testid="stDataFrame"] {
        border: 1px solid #e0e0e0;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1 {
        color: #333;
        font-weight: 600;
    }
    
    h2, h3 {
        color: #555;
        font-weight: 600;
    }
    </style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Streamlit –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω)
def init_session_state():
    try:
        if 'db_client' not in st.session_state:
            st.session_state.db_client = get_client()
            st.session_state.db_connected = True
        return True
    except Exception as e:
        if 'db_connected' not in st.session_state:
            st.session_state.db_connected = False
            st.session_state.db_error = str(e)
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è page –≤ session_state
if 'page' not in st.session_state:
    st.session_state.page = "üìä Dashboard"

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title("üì¶ WB API")
    st.caption("Dashboard & Analytics")
    
    st.divider()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    init_session_state()

    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if st.session_state.get('db_connected', False):
        st.success("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    else:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        with st.expander("–ü–æ–¥—Ä–æ–±–Ω–µ–µ"):
            st.warning(st.session_state.get('db_error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SUPABASE_URL –∏ SUPABASE_KEY –≤ api_keys.py")
    
    st.divider()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    st.subheader("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    pages = [
        ("üìä", "Dashboard"),
        ("üîÑ", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è"),
        ("üì¶", "–¢–æ–≤–∞—Ä—ã"),
        ("üí∞", "–¶–µ–Ω—ã"),
        ("üìà", "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω"),
        ("üìù", "–õ–æ–≥–∏"),
        ("üîß", "SQL –ó–∞–ø—Ä–æ—Å—ã"),
        ("‚öôÔ∏è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ]
    
    for icon, name in pages:
        page_key = f"{icon} {name}"
        if st.button(
            f"{icon} {name}",
            key=f"nav_{name}",
            use_container_width=True,
            type="primary" if st.session_state.page == page_key else "secondary"
        ):
            st.session_state.page = page_key
            st.rerun()
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.caption("**–í–µ—Ä—Å–∏—è:** 1.0.0")
    st.caption("**–ì–æ–¥:** 2025")
    st.caption("[üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è](database/WEB_INTERFACE.md)")

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
page = st.session_state.page

# =============================================================================
# DASHBOARD
# =============================================================================
if page == "üìä Dashboard":
    st.title("üìä WB API Dashboard")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–∞—à–±–æ—Ä–¥–∞
    st.sidebar.markdown("---")
    dashboard_template = st.sidebar.selectbox(
        "üìä –®–∞–±–ª–æ–Ω –¥–∞—à–±–æ—Ä–¥–∞",
        [
            "üìà –û–±—â–∏–π –æ–±–∑–æ—Ä",
            "üì¶ –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç",
            "üí∞ –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞",
            "üíº –§–∏–Ω–∞–Ω—Å—ã (–û–ü–∏–£)",
            "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞"
        ]
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns([6, 1])
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()
    
    try:
        products = db.get_active_products()
        barcodes = db.get_active_barcodes()
        products_with_prices = db.get_products_with_prices()
        
        # =============================================================================
        # –®–ê–ë–õ–û–ù: –û–ë–©–ò–ô –û–ë–ó–û–†
        # =============================================================================
        if dashboard_template == "üìà –û–±—â–∏–π –æ–±–∑–æ—Ä":
            st.markdown("### üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤",
                    len(products),
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"
                )
            with col2:
                st.metric(
                    "üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤",
                    len(barcodes),
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤ (SKU)"
                )
            with col3:
                st.metric(
                    "üí∞ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏",
                    len(products_with_prices),
                    help="–¢–æ–≤–∞—Ä—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"
                )
            with col4:
                coverage = (len(products_with_prices) / len(products) * 100) if products else 0
                st.metric(
                    "üìä –ü–æ–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω–∞–º–∏",
                    f"{coverage:.1f}%",
                    help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"
                )
            
            st.divider()
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.markdown("### üíµ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
            
            if products_with_prices:
                total_price = sum(p.get('price', 0) or 0 for p in products_with_prices)
                avg_price = total_price / len(products_with_prices) if products_with_prices else 0
                avg_discount = sum(p.get('discount', 0) or 0 for p in products_with_prices) / len(products_with_prices) if products_with_prices else 0
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.2f} ‚ÇΩ")
                with col2:
                    st.metric("üè∑Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", f"{avg_discount:.1f}%")
                with col3:
                    max_price = max((p.get('price', 0) or 0 for p in products_with_prices), default=0)
                    st.metric("üìà –ú–∞–∫—Å. —Ü–µ–Ω–∞", f"{max_price:,.2f} ‚ÇΩ")
                with col4:
                    min_price = min((p.get('price', 0) or 0 for p in products_with_prices if p.get('price', 0)), default=0)
                    st.metric("üìâ –ú–∏–Ω. —Ü–µ–Ω–∞", f"{min_price:,.2f} ‚ÇΩ")
            else:
                st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ü–µ–Ω.")
            
            st.divider()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            st.markdown("### üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            
            logs = db.get_recent_logs(limit=10)
            if logs:
                logs_df = pd.DataFrame(logs)
                logs_df['timestamp'] = pd.to_datetime(logs_df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
                
                def format_status(status):
                    if status == 'success':
                        return '‚úÖ –£—Å–ø–µ—à–Ω–æ'
                    elif status == 'warning':
                        return '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
                    else:
                        return '‚ùå –û—à–∏–±–∫–∞'
                
                logs_df['status_formatted'] = logs_df['status'].apply(format_status)
                
                st.dataframe(
                    logs_df[['timestamp', 'operation_type', 'status_formatted', 'records_processed', 'records_failed']].rename(columns={
                        'timestamp': '–í—Ä–µ–º—è',
                        'operation_type': '–û–ø–µ—Ä–∞—Ü–∏—è',
                        'status_formatted': '–°—Ç–∞—Ç—É—Å',
                        'records_processed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                        'records_failed': '–û—à–∏–±–æ–∫'
                    }),
                    use_container_width=True,
                    hide_index=True
                )
            else:
                st.info("üìã –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
            
            st.divider()
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
            st.markdown("### üíé –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üí∞ –°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ**")
                if products_with_prices:
                    top_expensive = sorted(products_with_prices, key=lambda x: x.get('price', 0) or 0, reverse=True)[:5]
                    for idx, item in enumerate(top_expensive, 1):
                        brand = item.get('brand', 'N/A')
                        price = item.get('price', 0)
                        vendor_code = item.get('vendor_code', 'N/A')
                        st.write(f"{idx}. **{brand}** ({vendor_code}) - {price:,.2f} ‚ÇΩ")
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            with col2:
                st.markdown("**üè∑Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏**")
                if products_with_prices:
                    top_discounts = sorted(products_with_prices, key=lambda x: x.get('discount', 0) or 0, reverse=True)[:5]
                    for idx, item in enumerate(top_discounts, 1):
                        brand = item.get('brand', 'N/A')
                        discount = item.get('discount', 0)
                        vendor_code = item.get('vendor_code', 'N/A')
                        st.write(f"{idx}. **{brand}** ({vendor_code}) - {discount}%")
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        # =============================================================================
        # –®–ê–ë–õ–û–ù: –¢–û–í–ê–†–û–û–ë–û–†–û–¢
        # =============================================================================
        elif dashboard_template == "üì¶ –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç":
            st.markdown("### üì¶ –¢–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–æ–±–æ—Ä–æ—Ç–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric(
                    "üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤",
                    len(products),
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
                )
            with col2:
                st.metric(
                    "üè∑Ô∏è –í—Å–µ–≥–æ SKU",
                    len(barcodes),
                    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤"
                )
            with col3:
                # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏ –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∂–µ
                ready_to_sell = len(products_with_prices)
                st.metric(
                    "‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∂–µ",
                    ready_to_sell,
                    help="–¢–æ–≤–∞—Ä—ã —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"
                )
            with col4:
                coverage = (ready_to_sell / len(products) * 100) if products else 0
                st.metric(
                    "üìä –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                    f"{coverage:.0f}%",
                    help="–ü—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—Ä–æ–¥–∞–∂–µ"
                )
            
            st.divider()
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –±—Ä–µ–Ω–¥–∞–º
            st.markdown("### üè∑Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±—Ä–µ–Ω–¥–∞–º")
            
            if products:
                # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥–∞–º
                brand_counts = {}
                for p in products:
                    brand = p.get('brand', '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞')
                    brand_counts[brand] = brand_counts.get(brand, 0) + 1
                
                # –¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤
                top_brands = sorted(brand_counts.items(), key=lambda x: x[1], reverse=True)[:5]
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    # –ì—Ä–∞—Ñ–∏–∫
                    brand_data = {brand: count for brand, count in top_brands}
                    st.bar_chart(brand_data)
                
                with col2:
                    st.markdown("**–¢–æ–ø-5 –±—Ä–µ–Ω–¥–æ–≤:**")
                    for idx, (brand, count) in enumerate(top_brands, 1):
                        percentage = (count / len(products) * 100)
                        st.write(f"{idx}. **{brand}**: {count} ({percentage:.1f}%)")
            else:
                st.info("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö")
            
            st.divider()
            
            # –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤
            st.markdown("### üìä –°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–æ–≤")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    "‚úÖ –° —Ü–µ–Ω–∞–º–∏",
                    len(products_with_prices),
                    help="–¢–æ–≤–∞—Ä—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—Ä–æ–¥–∞–∂–µ"
                )
            
            with col2:
                without_prices = len(products) - len(products_with_prices)
                st.metric(
                    "‚ö†Ô∏è –ë–µ–∑ —Ü–µ–Ω",
                    without_prices,
                    help="–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã"
                )
            
            with col3:
                # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏
                with_discounts = sum(1 for p in products_with_prices if p.get('discount', 0) > 0)
                st.metric(
                    "üè∑Ô∏è –°–æ —Å–∫–∏–¥–∫–∞–º–∏",
                    with_discounts,
                    help="–¢–æ–≤–∞—Ä—ã —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏"
                )
            
            st.divider()
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            
            if without_prices > 0:
                st.warning(f"‚ö†Ô∏è **{without_prices} —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ü–µ–Ω.** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞.")
            
            if coverage < 50:
                st.error("‚ùå **–ù–∏–∑–∫–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∂–µ.** –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω.")
            elif coverage < 80:
                st.info("üìä **–•–æ—Ä–æ—à–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.** –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã.")
            else:
                st.success("‚úÖ **–û—Ç–ª–∏—á–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!** –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∂–µ.")
        
        # =============================================================================
        # –®–ê–ë–õ–û–ù: –Æ–ù–ò–¢-–≠–ö–û–ù–û–ú–ò–ö–ê (–¶–ï–ù–´)
        # =============================================================================
        elif dashboard_template == "üí∞ –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞":
            st.markdown("### üí∞ –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
            
            if products_with_prices:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ü–µ–Ω
                col1, col2, col3, col4 = st.columns(4)
                
                total_price = sum(p.get('price', 0) or 0 for p in products_with_prices)
                avg_price = total_price / len(products_with_prices)
                avg_discount = sum(p.get('discount', 0) or 0 for p in products_with_prices) / len(products_with_prices)
                avg_attractive = sum(p.get('attractive_price', 0) or 0 for p in products_with_prices) / len([p for p in products_with_prices if p.get('attractive_price')])
                
                with col1:
                    st.metric("üíµ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{avg_price:,.2f} ‚ÇΩ")
                with col2:
                    st.metric("üè∑Ô∏è –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", f"{avg_discount:.1f}%")
                with col3:
                    st.metric("‚ú® –ü—Ä–∏–≤–ª–µ–∫. —Ü–µ–Ω–∞", f"{avg_attractive:,.2f} ‚ÇΩ" if avg_attractive else "-")
                with col4:
                    st.metric("üìä –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏", len(products_with_prices))
                
                st.divider()
                
                # –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                st.markdown("### üìä –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
                
                st.info("üí° **–§–æ—Ä–º—É–ª–∞ –º–∞—Ä–∂–∏**: (–¶–µ–Ω–∞ - –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å - –ö–æ–º–∏—Å—Å–∏—è WB - –õ–æ–≥–∏—Å—Ç–∏–∫–∞) / –¶–µ–Ω–∞ √ó 100%")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("üìà –°—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∞", "-", help="–ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏")
                with col2:
                    st.metric("üí∞ –ö–æ–º–∏—Å—Å–∏—è WB", "~5-15%", help="–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å –∏—é–Ω—è 2025 +5%)")
                with col3:
                    st.metric("üéØ ROI", "-", help="–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
                
                st.divider()
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω
                st.markdown("### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω")
                
                prices = [p.get('price', 0) or 0 for p in products_with_prices]
                
                if prices:
                    price_ranges = {
                        "–î–æ 500 ‚ÇΩ": len([p for p in prices if p < 500]),
                        "500-1000 ‚ÇΩ": len([p for p in prices if 500 <= p < 1000]),
                        "1000-2000 ‚ÇΩ": len([p for p in prices if 1000 <= p < 2000]),
                        "2000-5000 ‚ÇΩ": len([p for p in prices if 2000 <= p < 5000]),
                        "5000+ ‚ÇΩ": len([p for p in prices if p >= 5000]),
                    }
                    
                    st.bar_chart(price_ranges)
                
                st.divider()
                
                # –¢–æ–ø –ø–æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –ø–æ —Å–∫–∏–¥–∫–∞–º)
                st.markdown("### üíé –¢–æ–≤–∞—Ä—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–∏–¥–∫–æ–π")
                
                top_discounts = sorted(products_with_prices, key=lambda x: x.get('discount', 0) or 0, reverse=True)[:10]
                
                discount_data = []
                for item in top_discounts:
                    discount_data.append({
                        '–ë—Ä–µ–Ω–¥': item.get('brand', 'N/A'),
                        '–ê—Ä—Ç–∏–∫—É–ª': item.get('vendor_code', 'N/A'),
                        '–¶–µ–Ω–∞': f"{item.get('price', 0):,.2f} ‚ÇΩ",
                        '–°–∫–∏–¥–∫–∞': f"{item.get('discount', 0)}%"
                    })
                
                st.dataframe(discount_data, use_container_width=True, hide_index=True)
            
            else:
                st.warning("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ü–µ–Ω.")
        
        # =============================================================================
        # –®–ê–ë–õ–û–ù: –§–ò–ù–ê–ù–°–´ (–û–ü–∏–£)
        # =============================================================================
        elif dashboard_template == "üíº –§–∏–Ω–∞–Ω—Å—ã (–û–ü–∏–£)":
            st.markdown("### üíº –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç (–û–ü–∏–£)")
            
            if products_with_prices:
                # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
                total_price_value = sum(p.get('price', 0) or 0 for p in products_with_prices)
                total_discounted = sum(p.get('discounted_price', 0) or 0 for p in products_with_prices)
                avg_discount = sum(p.get('discount', 0) or 0 for p in products_with_prices) / len(products_with_prices)
                
                # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (–µ—Å–ª–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–Ω—ã –ø–æ 1 —à—Ç)
                potential_revenue = total_discounted if total_discounted > 0 else total_price_value
                
                # –û—Ü–µ–Ω–∫–∞ –∑–∞—Ç—Ä–∞—Ç (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è WB 5-15%, –±–µ—Ä–µ–º 10%)
                wb_commission = potential_revenue * 0.10
                
                # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞ (2-5% –æ—Ç –≤—ã—Ä—É—á–∫–∏)
                logistics_cost = potential_revenue * 0.03
                
                # –û—Ü–µ–Ω–∫–∞ –º–∞—Ä–∂–∏
                estimated_margin = ((potential_revenue - wb_commission - logistics_cost) / potential_revenue * 100) if potential_revenue > 0 else 0
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric(
                        "üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞",
                        f"{potential_revenue:,.0f} ‚ÇΩ",
                        help="–°—É–º–º–∞ —Ü–µ–Ω –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø–æ 1 —à—Ç)"
                    )
                with col2:
                    st.metric(
                        "üí∏ –ö–æ–º–∏—Å—Å–∏—è WB",
                        f"{wb_commission:,.0f} ‚ÇΩ",
                        help="–ü—Ä–∏–º–µ—Ä–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (~10%)"
                    )
                with col3:
                    st.metric(
                        "üìà –ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞",
                        f"{potential_revenue - wb_commission - logistics_cost:,.0f} ‚ÇΩ",
                        help="–ü–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏"
                    )
                with col4:
                    st.metric(
                        "üìä –û—Ü–µ–Ω–æ—á–Ω–∞—è –º–∞—Ä–∂–∞",
                        f"{estimated_margin:.1f}%",
                        help="–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
                    )
                
                st.divider()
                
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç
                st.markdown("### üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—Ç—Ä–∞—Ç (–æ—Ü–µ–Ω–æ—á–Ω–æ)")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        "üè™ –ö–æ–º–∏—Å—Å–∏—è WB",
                        f"{wb_commission:,.0f} ‚ÇΩ",
                        f"~{(wb_commission/potential_revenue*100):.1f}%",
                        help="–ö–æ–º–∏—Å—Å–∏—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞"
                    )
                with col2:
                    st.metric(
                        "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞",
                        f"{logistics_cost:,.0f} ‚ÇΩ",
                        f"~{(logistics_cost/potential_revenue*100):.1f}%",
                        help="–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã (–æ—Ü–µ–Ω–∫–∞)"
                    )
                with col3:
                    total_costs = wb_commission + logistics_cost
                    st.metric(
                        "üí∏ –í—Å–µ–≥–æ –∑–∞—Ç—Ä–∞—Ç",
                        f"{total_costs:,.0f} ‚ÇΩ",
                        f"~{(total_costs/potential_revenue*100):.1f}%",
                        help="–°—É–º–º–∞ –≤—Å–µ—Ö –∑–∞—Ç—Ä–∞—Ç"
                    )
                
                st.divider()
                
                # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º
                st.markdown("### üíé –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–µ–Ω–æ–≤—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º")
                
                # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
                premium = [p for p in products_with_prices if (p.get('price', 0) or 0) >= 5000]
                mid_range = [p for p in products_with_prices if 1000 <= (p.get('price', 0) or 0) < 5000]
                budget = [p for p in products_with_prices if (p.get('price', 0) or 0) < 1000]
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    premium_value = sum(p.get('price', 0) or 0 for p in premium)
                    st.metric(
                        "üíé –ü—Ä–µ–º–∏—É–º (5000+ ‚ÇΩ)",
                        f"{len(premium)} —à—Ç",
                        f"{premium_value:,.0f} ‚ÇΩ",
                        help="–¢–æ–≤–∞—Ä—ã –¥–æ—Ä–æ–∂–µ 5000 ‚ÇΩ"
                    )
                
                with col2:
                    mid_value = sum(p.get('price', 0) or 0 for p in mid_range)
                    st.metric(
                        "üìä –°—Ä–µ–¥–Ω–∏–π (1000-5000 ‚ÇΩ)",
                        f"{len(mid_range)} —à—Ç",
                        f"{mid_value:,.0f} ‚ÇΩ",
                        help="–¢–æ–≤–∞—Ä—ã –æ—Ç 1000 –¥–æ 5000 ‚ÇΩ"
                    )
                
                with col3:
                    budget_value = sum(p.get('price', 0) or 0 for p in budget)
                    st.metric(
                        "üí∞ –ë—é–¥–∂–µ—Ç (<1000 ‚ÇΩ)",
                        f"{len(budget)} —à—Ç",
                        f"{budget_value:,.0f} ‚ÇΩ",
                        help="–¢–æ–≤–∞—Ä—ã –¥–µ—à–µ–≤–ª–µ 1000 ‚ÇΩ"
                    )
                
                st.divider()
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º")
                
                if avg_discount > 30:
                    st.warning(f"‚ö†Ô∏è **–í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞ ({avg_discount:.1f}%)** - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –±–æ–ª—å—à–∏—Ö —Å–∫–∏–¥–æ–∫.")
                
                if estimated_margin < 15:
                    st.error("‚ùå **–ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–Ω–∏–∑–∏—Ç—å –∑–∞—Ç—Ä–∞—Ç—ã.")
                elif estimated_margin < 25:
                    st.info("üìä **–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å** - –µ—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.")
                else:
                    st.success("‚úÖ **–•–æ—Ä–æ—à–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å!** –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
                
                st.info("""
                **üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –†–∞—Å—á–µ—Ç—ã —è–≤–ª—è—é—Ç—Å—è –æ—Ü–µ–Ω–æ—á–Ω—ã–º–∏ –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö.
                –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –û–ü–∏–£ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏ WB API.
                """)
            
            else:
                st.warning("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ü–µ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.")
        
        # =============================================================================
        # –®–ê–ë–õ–û–ù: –õ–û–ì–ò–°–¢–ò–ö–ê
        # =============================================================================
        elif dashboard_template == "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞":
            st.markdown("### üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ —Å–∫–ª–∞–¥")
            st.info("üöß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Warehouse API")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∫–ª–∞–¥–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ WB", "-", help="–¢–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏")
            with col2:
                st.metric("üöö –í –ø—É—Ç–∏", "-", help="–¢–æ–≤–∞—Ä—ã –≤ —Ç—Ä–∞–Ω–∑–∏—Ç–µ")
            with col3:
                st.metric("üìê –û–±—ä–µ–º (–ª–∏—Ç—Ä—ã)", "-", help="–°—É–º–º–∞—Ä–Ω—ã–π –ª–∏—Ç—Ä–∞–∂")
            with col4:
                st.metric("‚è±Ô∏è –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫", "-", help="–î–Ω–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ")
            
            st.divider()
            
            st.markdown("### üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫–∏")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üí∏ –•—Ä–∞–Ω–µ–Ω–∏–µ (–¥–µ–Ω—å)", "-", help="–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å")
            with col2:
                st.metric("üì• –ü—Ä–∏–µ–º–∫–∞", "-", help="–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–µ–º–∫–∏")
            with col3:
                st.metric("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã", "-", help="–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –ª–æ–≥–∏—Å—Ç–∏–∫–∏")
            
            st.divider()
            
            st.markdown("### üìä –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            
            st.info("–ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
# =============================================================================
elif page == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è":
    st.title("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()
    
    st.markdown("""
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    - **–ê—Ä—Ç–∏–∫—É–ª—ã**: Content Cards API ‚Üí –ë–î
    - **–¶–µ–Ω—ã**: Discounts-Prices API ‚Üí –ë–î
    """)
    
    st.divider()
    
    # –ê—Ä—Ç–∏–∫—É–ª—ã
    st.subheader("üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        max_cards = st.number_input(
            "–ú–∞–∫—Å–∏–º—É–º –∫–∞—Ä—Ç–æ—á–µ–∫ (0 = –≤—Å–µ)",
            min_value=0,
            value=100,
            step=50,
            help="–î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
    
    with col2:
        st.write("")
        st.write("")
        sync_articles_btn = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", key="sync_articles", type="primary")
    
    if sync_articles_btn:
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤..."):
            try:
                from wb_api.content_cards import WBContentCardsClient, API_KEY
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if not API_KEY or API_KEY == "your_wildberries_api_key_here":
                    st.error("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                    st.warning("""
                    **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á:**
                    1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `api_keys.py`
                    2. –ó–∞–º–µ–Ω–∏—Ç–µ `WB_API_KEY = "your_wildberries_api_key_here"`
                    3. –ù–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB
                    
                    **–ì–¥–µ –≤–∑—è—Ç—å –∫–ª—é—á:**
                    - –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries
                    - –ü–µ—Ä–µ–π–¥–∏—Ç–µ: **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API**
                    - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ **Content/–ö–æ–Ω—Ç–µ–Ω—Ç**
                    - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ `api_keys.py`
                    """)
                    st.stop()
                
                api_client = WBContentCardsClient(API_KEY)
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API...")
                progress_bar.progress(30)
                
                stats = sync_content_cards_to_db(
                    api_client=api_client,
                    db_client=st.session_state.db_client,
                    max_cards=max_cards if max_cards > 0 else None
                )
                
                progress_bar.progress(100)
                status_text.text("–ì–æ—Ç–æ–≤–æ!")
                
                time.sleep(0.5)
                progress_bar.empty()
                status_text.empty()
                
                if stats['failed'] == 0:
                    st.success(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–£—Å–ø–µ—à–Ω–æ", stats['success'])
                with col2:
                    st.metric("–û—à–∏–±–æ–∫", stats['failed'])
                with col3:
                    st.metric("–í—Å–µ–≥–æ –±–∞—Ä–∫–æ–¥–æ–≤", stats['total_variants'])
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                if "401" in str(e) or "Unauthorized" in str(e):
                    st.warning("""
                    **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401 Unauthorized)**
                    
                    –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                    1. API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
                    2. API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                    3. –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
                    
                    **–†–µ—à–µ–Ω–∏–µ:**
                    - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB
                    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Ç–æ–∫–µ–Ω–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ **Content/–ö–æ–Ω—Ç–µ–Ω—Ç**
                    - –û–±–Ω–æ–≤–∏—Ç–µ `WB_API_KEY` –≤ `api_keys.py`
                    """)
    
    st.divider()
    
    # –¶–µ–Ω—ã
    st.subheader("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        max_goods = st.number_input(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ (0 = –≤—Å–µ)",
            min_value=0,
            value=50,
            step=50,
            help="–î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
    
    with col2:
        st.write("")
        st.write("")
        sync_prices_btn = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", key="sync_prices", type="primary")
    
    if sync_prices_btn:
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω..."):
            try:
                from wb_api.discounts_prices.discounts_prices import WBDiscountsPricesClient, AUTHORIZEV3_TOKEN
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if not AUTHORIZEV3_TOKEN or AUTHORIZEV3_TOKEN == "your_discounts_api_key_here":
                    st.error("‚ùå API –∫–ª—é—á –¥–ª—è —Ü–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                    st.warning("""
                    **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –¥–ª—è —Ü–µ–Ω:**
                    1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `api_keys.py`
                    2. –ó–∞–º–µ–Ω–∏—Ç–µ `WB_DISCOUNTS_API_KEY = "your_discounts_api_key_here"`
                    3. –ù–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ WB
                    
                    **–ì–¥–µ –≤–∑—è—Ç—å –∫–ª—é—á:**
                    - –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ Wildberries
                    - –ü–µ—Ä–µ–π–¥–∏—Ç–µ: **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API**
                    - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ **–¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏**
                    - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ `api_keys.py`
                    """)
                    st.stop()
                
                api_client = WBDiscountsPricesClient()
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API...")
                progress_bar.progress(30)
                
                stats = sync_discounts_prices_to_db(
                    api_client=api_client,
                    db_client=st.session_state.db_client,
                    max_goods=max_goods if max_goods > 0 else None
                )
                
                progress_bar.progress(100)
                status_text.text("–ì–æ—Ç–æ–≤–æ!")
                
                time.sleep(0.5)
                progress_bar.empty()
                status_text.empty()
                
                if stats['failed'] == 0:
                    st.success(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–£—Å–ø–µ—à–Ω–æ", stats['success'])
                with col2:
                    st.metric("–û—à–∏–±–æ–∫", stats['failed'])
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                if "401" in str(e) or "Unauthorized" in str(e):
                    st.warning("""
                    **–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401 Unauthorized)**
                    
                    –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
                    1. API –∫–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
                    2. API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å —Ü–µ–Ω–∞–º–∏
                    3. –ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
                    
                    **–†–µ—à–µ–Ω–∏–µ:**
                    - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB
                    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É —Ç–æ–∫–µ–Ω–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ **–¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏**
                    - –û–±–Ω–æ–≤–∏—Ç–µ `WB_DISCOUNTS_API_KEY` –≤ `api_keys.py`
                    """)

# =============================================================================
# –¢–û–í–ê–†–´
# =============================================================================
elif page == "üì¶ –¢–æ–≤–∞—Ä—ã":
    st.title("üì¶ –¢–æ–≤–∞—Ä—ã")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_nm_id = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ nmID", placeholder="12345678")
    
    with col2:
        search_vendor = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–¥–∞–≤—Ü–∞", placeholder="ART-001")
    
    with col3:
        search_brand = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É", placeholder="MyBrand")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        products = db.get_active_products()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if search_nm_id:
            products = [p for p in products if str(p.get('nm_id', '')).startswith(search_nm_id)]
        if search_vendor:
            products = [p for p in products if search_vendor.lower() in str(p.get('vendor_code', '')).lower()]
        if search_brand:
            products = [p for p in products if search_brand.lower() in str(p.get('brand', '')).lower()]
        
        st.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if products:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame
            df = pd.DataFrame(products)
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = ['nm_id', 'vendor_code', 'brand', 'title', 'subject', 'volume', 'updated_at']
            available_columns = [col for col in display_columns if col in df.columns]
            
            if 'updated_at' in df.columns:
                df['updated_at'] = pd.to_datetime(df['updated_at']).dt.strftime('%Y-%m-%d %H:%M')
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            column_names = {
                'nm_id': 'nmID',
                'vendor_code': '–ê—Ä—Ç–∏–∫—É–ª',
                'brand': '–ë—Ä–µ–Ω–¥',
                'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                'subject': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'volume': '–õ–∏—Ç—Ä–∞–∂',
                'updated_at': '–û–±–Ω–æ–≤–ª–µ–Ω–æ'
            }
            
            df_display = df[available_columns].rename(columns=column_names)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            st.dataframe(
                df_display,
                use_container_width=True,
                hide_index=True
            )
            
            # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            st.divider()
            st.subheader("üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞")
            
            selected_nm_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä",
                options=[p['nm_id'] for p in products],
                format_func=lambda x: f"{x} - {next((p['brand'] for p in products if p['nm_id'] == x), 'N/A')}"
            )
            
            if selected_nm_id:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                product = next((p for p in products if p['nm_id'] == selected_nm_id), None)
                if product:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
                        st.write(f"**nmID:** {product.get('nm_id')}")
                        st.write(f"**–ê—Ä—Ç–∏–∫—É–ª:** {product.get('vendor_code')}")
                        st.write(f"**–ë—Ä–µ–Ω–¥:** {product.get('brand')}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product.get('subject')}")
                    
                    with col2:
                        st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**")
                        st.write(f"**–õ–∏—Ç—Ä–∞–∂:** {product.get('volume', 0)} –ª")
                        st.write(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'–î–∞' if product.get('active') else '–ù–µ—Ç'}")
                        st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {product.get('updated_at')}")
                    
                    # –ë–∞—Ä–∫–æ–¥—ã
                    st.markdown("**–ë–∞—Ä–∫–æ–¥—ã –∏ —Ä–∞–∑–º–µ—Ä—ã**")
                    barcodes = db.get_active_barcodes(nm_id=selected_nm_id)
                    if barcodes:
                        barcodes_df = pd.DataFrame(barcodes)
                        st.dataframe(
                            barcodes_df[['barcode', 'size']].rename(columns={
                                'barcode': '–®—Ç—Ä–∏—Ö–∫–æ–¥',
                                'size': '–†–∞–∑–º–µ—Ä'
                            }),
                            use_container_width=True,
                            hide_index=True
                        )
                    else:
                        st.info("–ù–µ—Ç –±–∞—Ä–∫–æ–¥–æ–≤")
        
        else:
            st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –¶–ï–ù–´
# =============================================================================
elif page == "üí∞ –¶–µ–Ω—ã":
    st.title("üí∞ –¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filter_competitive = st.checkbox("–¢–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π")
    
    with col2:
        filter_promotions = st.checkbox("–¢–æ–ª—å–∫–æ —Å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏")
    
    with col3:
        min_discount = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (%)", 0, 100, 0)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        products = db.get_products_with_prices()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if filter_competitive:
            products = [p for p in products if p.get('is_competitive_price')]
        if filter_promotions:
            products = [p for p in products if p.get('has_promotions')]
        if min_discount > 0:
            products = [p for p in products if (p.get('discount', 0) or 0) >= min_discount]
        
        st.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if products:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame
            df = pd.DataFrame(products)
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
            display_columns = [
                'nm_id', 'vendor_code', 'brand', 'price', 'discounted_price',
                'discount', 'discount_on_site', 'price_after_spp', 'competitive_price'
            ]
            available_columns = [col for col in display_columns if col in df.columns]
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            column_names = {
                'nm_id': 'nmID',
                'vendor_code': '–ê—Ä—Ç–∏–∫—É–ª',
                'brand': '–ë—Ä–µ–Ω–¥',
                'price': '–¶–µ–Ω–∞',
                'discounted_price': '–°–æ —Å–∫–∏–¥–∫–æ–π',
                'discount': '–°–∫–∏–¥–∫–∞ %',
                'discount_on_site': '–°–ü–ü %',
                'price_after_spp': '–ü–æ—Å–ª–µ –°–ü–ü',
                'competitive_price': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è'
            }
            
            df_display = df[available_columns].rename(columns=column_names)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
            for col in ['–¶–µ–Ω–∞', '–°–æ —Å–∫–∏–¥–∫–æ–π', '–ü–æ—Å–ª–µ –°–ü–ü', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è']:
                if col in df_display.columns:
                    df_display[col] = df_display[col].apply(lambda x: f"{x:.2f}" if x and x != 99999 else "-")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.dataframe(
                df_display,
                use_container_width=True,
                hide_index=True
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.divider()
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            col1, col2, col3, col4 = st.columns(4)
            
            prices = [p.get('price', 0) or 0 for p in products if p.get('price')]
            discounts = [p.get('discount', 0) or 0 for p in products if p.get('discount')]
            
            with col1:
                if prices:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{sum(prices) / len(prices):.2f} ‚ÇΩ")
                else:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "-")
            
            with col2:
                if discounts:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", f"{sum(discounts) / len(discounts):.1f}%")
                else:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", "-")
            
            with col3:
                competitive_count = sum(1 for p in products if p.get('is_competitive_price'))
                st.metric("–° –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π", competitive_count)
            
            with col4:
                promo_count = sum(1 for p in products if p.get('has_promotions'))
                st.metric("–° –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏", promo_count)
        
        else:
            st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –ò–°–¢–û–†–ò–Ø –¶–ï–ù
# =============================================================================
elif page == "üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω":
    st.title("üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()
    
    st.info("üìå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ database/queries.sql")

# =============================================================================
# –õ–û–ì–ò
# =============================================================================
elif page == "üìù –õ–æ–≥–∏":
    st.title("üìù –õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 10, 100, 20, step=10)
    
    try:
        logs = db.get_recent_logs(limit=limit)
        
        if logs:
            df = pd.DataFrame(logs)
            df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_filter = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                options=['success', 'warning', 'error'],
                default=['success', 'warning', 'error'],
                format_func=lambda x: {'success': '‚úÖ –£—Å–ø–µ—à–Ω–æ', 'warning': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 'error': '‚ùå –û—à–∏–±–∫–∞'}[x]
            )
            
            if status_filter:
                df = df[df['status'].isin(status_filter)]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.dataframe(
                df[['timestamp', 'operation_type', 'status', 'records_processed', 'records_failed', 'execution_time_ms']].rename(columns={
                    'timestamp': '–í—Ä–µ–º—è',
                    'operation_type': '–û–ø–µ—Ä–∞—Ü–∏—è',
                    'status': '–°—Ç–∞—Ç—É—Å',
                    'records_processed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                    'records_failed': '–û—à–∏–±–æ–∫',
                    'execution_time_ms': '–í—Ä–µ–º—è (–º—Å)'
                }),
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {e}")

# =============================================================================
# SQL –ó–ê–ü–†–û–°–´
# =============================================================================
elif page == "üîß SQL –ó–∞–ø—Ä–æ—Å—ã":
    st.title("üîß SQL –ó–∞–ø—Ä–æ—Å—ã")
    
    st.markdown("""
    –ì–æ—Ç–æ–≤—ã–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ Python-–∫–æ–¥–µ –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Supabase.
    """)
    
    st.divider()
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    query_category = st.selectbox(
        "üìã –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
        [
            "üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏",
            "‚ûï Upsert –∞—Ä—Ç–∏–∫—É–ª–æ–≤",
            "üí∞ Upsert —Ü–µ–Ω",
            "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
            "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
        ]
    )
    
    # =============================================================================
    # –û–°–ù–û–í–ù–´–ï –í–´–ë–û–†–ö–ò
    # =============================================================================
    if query_category == "üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏":
        st.subheader("üîç –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–ø—Ä–æ—Å 1: –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        with st.expander("üì¶ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã"):
            st.code("""
-- –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
SELECT 
    p.nm_id,
    p.vendor_code,
    p.brand,
    p.title,
    p.subject,
    p.volume,
    p.updated_at
FROM products p
WHERE p.is_active = TRUE
ORDER BY p.updated_at DESC;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
products = db.client.table('products') \\
    .select('*') \\
    .eq('is_active', True) \\
    .order('updated_at', desc=True) \\
    .execute()
            """, language="python")
        
        # –ó–∞–ø—Ä–æ—Å 2: –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
        with st.expander("üí∞ –¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏"):
            st.code("""
-- –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏
SELECT 
    p.nm_id,
    p.vendor_code,
    p.brand,
    p.title,
    ue.price,
    ue.discounted_price,
    ue.discount,
    ue.competitive_price,
    ue.updated_at as price_updated_at
FROM products p
INNER JOIN unit_economics ue ON p.nm_id = ue.nm_id
WHERE p.is_active = TRUE
ORDER BY ue.price DESC;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
products_with_prices = db.get_products_with_prices()
            """, language="python")
        
        # –ó–∞–ø—Ä–æ—Å 3: –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ä–∫–æ–¥—ã
        with st.expander("üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ä–∫–æ–¥—ã"):
            st.code("""
-- –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ä–∫–æ–¥—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
SELECT 
    sa.barcode,
    sa.vendor_code,
    sa.size,
    p.brand,
    p.title,
    sa.updated_at
FROM seller_articles sa
INNER JOIN products p ON sa.nm_id = p.nm_id
WHERE sa.is_active = TRUE
ORDER BY sa.updated_at DESC;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
barcodes = db.get_active_barcodes()
            """, language="python")
    
    # =============================================================================
    # UPSERT –ê–†–¢–ò–ö–£–õ–û–í
    # =============================================================================
    elif query_category == "‚ûï Upsert –∞—Ä—Ç–∏–∫—É–ª–æ–≤":
        st.subheader("‚ûï Upsert –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏–∑ Content API")
        
        # –ó–∞–ø—Ä–æ—Å 1: Upsert —Ç–æ–≤–∞—Ä–∞
        with st.expander("üì¶ Upsert –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"):
            st.code("""
-- –í—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
INSERT INTO products (nm_id, vendor_code, brand, title, subject, volume)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (nm_id) DO UPDATE SET
    vendor_code = EXCLUDED.vendor_code,
    brand = EXCLUDED.brand,
    title = EXCLUDED.title,
    subject = EXCLUDED.subject,
    volume = EXCLUDED.volume,
    updated_at = NOW()
RETURNING id, nm_id;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
from database.db_client import get_client

db = get_client()
result = db.upsert_product(
    nm_id=12345678,
    vendor_code='ART-001',
    brand='MyBrand',
    title='–¢–æ–≤–∞—Ä 1',
    subject='–§—É—Ç–±–æ–ª–∫–∏',
    volume=0.5
)
            """, language="python")
        
        # –ó–∞–ø—Ä–æ—Å 2: Batch upsert
        with st.expander("üì¶ Batch upsert —Ç–æ–≤–∞—Ä–æ–≤"):
            st.code("""
-- –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
INSERT INTO products (nm_id, vendor_code, brand, title, subject, volume)
VALUES 
    (12345678, 'ART-001', 'MyBrand', '–¢–æ–≤–∞—Ä 1', '–§—É—Ç–±–æ–ª–∫–∏', 0.5),
    (23456789, 'ART-002', 'MyBrand', '–¢–æ–≤–∞—Ä 2', '–ö—Ä–æ—Å—Å–æ–≤–∫–∏', 1.2),
    (34567890, 'ART-003', 'MyBrand', '–¢–æ–≤–∞—Ä 3', '–†—é–∫–∑–∞–∫–∏', 2.0)
ON CONFLICT (nm_id) DO UPDATE SET
    vendor_code = EXCLUDED.vendor_code,
    brand = EXCLUDED.brand,
    title = EXCLUDED.title,
    subject = EXCLUDED.subject,
    volume = EXCLUDED.volume,
    updated_at = NOW();
            """, language="sql")
        
        # –ó–∞–ø—Ä–æ—Å 3: Upsert –±–∞—Ä–∫–æ–¥–æ–≤
        with st.expander("üè∑Ô∏è Upsert –±–∞—Ä–∫–æ–¥–æ–≤"):
            st.code("""
-- –í—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ä–∫–æ–¥–∞
INSERT INTO seller_articles (nm_id, vendor_code, barcode, size)
VALUES ($1, $2, $3, $4)
ON CONFLICT (barcode) DO UPDATE SET
    nm_id = EXCLUDED.nm_id,
    vendor_code = EXCLUDED.vendor_code,
    size = EXCLUDED.size,
    updated_at = NOW()
RETURNING id, barcode;
            """, language="sql")
            
            st.markdown("**Batch upsert:**")
            st.code("""
-- –ú–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –±–∞—Ä–∫–æ–¥–æ–≤
INSERT INTO seller_articles (nm_id, vendor_code, barcode, size)
VALUES 
    (12345678, 'ART-001', '2000000123456', 'M'),
    (12345678, 'ART-001', '2000000123457', 'L'),
    (23456789, 'ART-002', '2000000234567', '42')
ON CONFLICT (barcode) DO UPDATE SET
    nm_id = EXCLUDED.nm_id,
    vendor_code = EXCLUDED.vendor_code,
    size = EXCLUDED.size,
    updated_at = NOW();
            """, language="sql")
    
    # =============================================================================
    # UPSERT –¶–ï–ù
    # =============================================================================
    elif query_category == "üí∞ Upsert —Ü–µ–Ω":
        st.subheader("üí∞ Upsert —Ü–µ–Ω –∏–∑ Discounts-Prices API")
        
        # –ó–∞–ø—Ä–æ—Å 1: Upsert —Ü–µ–Ω
        with st.expander("üí∞ Upsert —Ü–µ–Ω –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"):
            st.code("""
-- –í—Å—Ç–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
INSERT INTO unit_economics (
    nm_id, vendor_code, price, discounted_price, discount, 
    discount_on_site, price_after_spp, competitive_price, 
    is_competitive_price, has_promotions
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
ON CONFLICT (nm_id) DO UPDATE SET
    vendor_code = EXCLUDED.vendor_code,
    price = EXCLUDED.price,
    discounted_price = EXCLUDED.discounted_price,
    discount = EXCLUDED.discount,
    discount_on_site = EXCLUDED.discount_on_site,
    price_after_spp = EXCLUDED.price_after_spp,
    competitive_price = EXCLUDED.competitive_price,
    is_competitive_price = EXCLUDED.is_competitive_price,
    has_promotions = EXCLUDED.has_promotions,
    updated_at = NOW()
RETURNING nm_id, price_after_spp;
            """, language="sql")
        
        # –ó–∞–ø—Ä–æ—Å 2: –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
        with st.expander("üìà –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"):
            st.code("""
-- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
INSERT INTO price_history (
    nm_id, vendor_code, price, discounted_price, 
    discount, competitive_price
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, nm_id, changed_at;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä
db.upsert_unit_economics(
    nm_id=12345678,
    price=1000.0,
    discounted_price=900.0,
    discount=10
)
# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            """, language="python")
    
    # =============================================================================
    # –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # =============================================================================
    elif query_category == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã":
        st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # –ó–∞–ø—Ä–æ—Å 1: –¢–æ–ø –ø–æ —Ü–µ–Ω–∞–º
        with st.expander("üí∞ –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
            st.code("""
-- –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–µ
SELECT 
    p.nm_id,
    p.vendor_code,
    p.brand,
    p.title,
    ue.price,
    ue.discount
FROM products p
INNER JOIN unit_economics ue ON p.nm_id = ue.nm_id
WHERE p.is_active = TRUE
ORDER BY ue.price DESC
LIMIT 10;
            """, language="sql")
        
        # –ó–∞–ø—Ä–æ—Å 2: –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        with st.expander("üìä –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ —Ü–µ–Ω–∞–º"):
            st.code("""
-- –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
SELECT 
    COUNT(*) as total_products,
    AVG(ue.price) as avg_price,
    AVG(ue.discount) as avg_discount,
    MAX(ue.price) as max_price,
    MIN(ue.price) as min_price
FROM unit_economics ue
INNER JOIN products p ON ue.nm_id = p.nm_id
WHERE p.is_active = TRUE;
            """, language="sql")
        
        # –ó–∞–ø—Ä–æ—Å 3: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        with st.expander("üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Ç–æ–≤–∞—Ä–∞"):
            st.code("""
-- –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
SELECT 
    ph.changed_at,
    ph.price,
    ph.discounted_price,
    ph.discount,
    ph.competitive_price
FROM price_history ph
WHERE ph.nm_id = $1
ORDER BY ph.changed_at DESC
LIMIT 30;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
history = db.get_price_history(nm_id=12345678, limit=30)
            """, language="python")
    
    # =============================================================================
    # –û–ß–ò–°–¢–ö–ê
    # =============================================================================
    elif query_category == "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ":
        st.subheader("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –ë–î")
        
        # –ó–∞–ø—Ä–æ—Å 1: –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        with st.expander("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"):
            st.code("""
-- –£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
DELETE FROM validation_logs
WHERE timestamp < NOW() - INTERVAL '30 days'
RETURNING id;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
deleted_count = db.cleanup_old_logs(days=30)
print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
            """, language="python")
        
        # –ó–∞–ø—Ä–æ—Å 2: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        with st.expander("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω"):
            st.code("""
-- –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
DELETE FROM price_history
WHERE changed_at < NOW() - INTERVAL '90 days'
RETURNING id;
            """, language="sql")
            
            st.markdown("**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ Python:**")
            st.code("""
deleted_count = db.cleanup_old_price_history(days=90)
print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
            """, language="python")
        
        # –ó–∞–ø—Ä–æ—Å 3: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        with st.expander("üì¶ –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"):
            st.code("""
-- –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã, –Ω–µ –æ–±–Ω–æ–≤–ª—è–≤—à–∏–µ—Å—è –±–æ–ª–µ–µ 30 –¥–Ω–µ–π
UPDATE products
SET is_active = FALSE
WHERE updated_at < NOW() - INTERVAL '30 days'
  AND is_active = TRUE
RETURNING nm_id, vendor_code;
            """, language="sql")
    
    st.divider()
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª
    st.markdown("### üìÑ –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—Ä–æ—Å–æ–≤")
    st.info("–í—Å–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–∞–π–ª–µ: `database/queries.sql` (567 —Å—Ç—Ä–æ–∫)")
    
    st.markdown("""
    **–°–æ–¥–µ—Ä–∂–∏—Ç:**
    - Upsert –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –±–∞—Ä–∫–æ–¥–æ–≤
    - Upsert —Ü–µ–Ω –∏ –∏—Å—Ç–æ—Ä–∏–∏
    - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    - –§—É–Ω–∫—Ü–∏–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    - –¢—Ä–∏–≥–≥–µ—Ä—ã –∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Python
    """)

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================================================
elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (>30 –¥–Ω–µ–π)**")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", type="secondary"):
            with st.spinner("–û—á–∏—Å—Ç–∫–∞..."):
                try:
                    deleted = db.cleanup_old_logs()
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    with col2:
        st.markdown("**–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (>90 –¥–Ω–µ–π)**")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
            with st.spinner("–û—á–∏—Å—Ç–∫–∞..."):
                try:
                    deleted = db.cleanup_old_price_history()
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
    
    st.code(f"""
URL: {db.url}
Key: {db.key[:20]}...{db.key[-20:]}
    """)
    
    st.divider()
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    st.subheader("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.markdown("""
    - [database/README.md](./database/README.md) - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - [database/SETUP.md](./database/SETUP.md) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    - [database/queries.sql](./database/queries.sql) - SQL –∑–∞–ø—Ä–æ—Å—ã
    - [Supabase Dashboard](https://app.supabase.com)
    """)

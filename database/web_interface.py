"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î Wildberries (Streamlit).
–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: python database/web_interface.py
"""

import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import time
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.db_client import get_client
from database.integrations.content_cards_db import sync_content_cards_to_db
from database.integrations.discounts_prices_db import sync_discounts_prices_to_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="WB API Dashboard",
    page_icon="üì¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
    <style>
    .big-metric {
        font-size: 2rem;
        font-weight: bold;
        color: #1f77b4;
    }
    .success-box {
        padding: 1rem;
        background-color: #d4edda;
        border-left: 5px solid #28a745;
        margin: 1rem 0;
    }
    .warning-box {
        padding: 1rem;
        background-color: #fff3cd;
        border-left: 5px solid #ffc107;
        margin: 1rem 0;
    }
    .error-box {
        padding: 1rem;
        background-color: #f8d7da;
        border-left: 5px solid #dc3545;
        margin: 1rem 0;
    }
    </style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Streamlit –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω)
def init_session_state():
    try:
        if 'db_client' not in st.session_state:
            st.session_state.db_client = get_client()
            st.session_state.db_connected = True
        return True
    except Exception as e:
        if 'db_connected' not in st.session_state:
            st.session_state.db_connected = False
            st.session_state.db_error = str(e)
        return False

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title("üõ†Ô∏è WB API Dashboard")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    init_session_state()

    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if st.session_state.get('db_connected', False):
        st.success("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    else:
        st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        st.error(st.session_state.get('db_error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SUPABASE_URL –∏ SUPABASE_KEY –≤ api_keys.py")
    
    st.divider()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    page = st.radio(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        [
            "üìä Dashboard",
            "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è",
            "üì¶ –¢–æ–≤–∞—Ä—ã",
            "üí∞ –¶–µ–Ω—ã",
            "üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω",
            "üìù –õ–æ–≥–∏",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        ]
    )

# =============================================================================
# DASHBOARD
# =============================================================================
if page == "üìä Dashboard":
    st.title("üìä Dashboard")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    col1, col2 = st.columns([6, 1])
    with col2:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    try:
        products = db.get_active_products()
        barcodes = db.get_active_barcodes()
        products_with_prices = db.get_products_with_prices()
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", len(products))
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤", len(barcodes))
        with col3:
            st.metric("–¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏", len(products_with_prices))
        with col4:
            coverage = (len(products_with_prices) / len(products) * 100) if products else 0
            st.metric("–ü–æ–∫—Ä—ã—Ç–∏–µ —Ü–µ–Ω–∞–º–∏", f"{coverage:.1f}%")
        
        st.divider()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        st.subheader("üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        
        logs = db.get_recent_logs(limit=10)
        if logs:
            logs_df = pd.DataFrame(logs)
            logs_df['timestamp'] = pd.to_datetime(logs_df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            def format_status(status):
                if status == 'success':
                    return '‚úÖ –£—Å–ø–µ—à–Ω–æ'
                elif status == 'warning':
                    return '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'
                else:
                    return '‚ùå –û—à–∏–±–∫–∞'
            
            logs_df['status_formatted'] = logs_df['status'].apply(format_status)
            
            st.dataframe(
                logs_df[['timestamp', 'operation_type', 'status_formatted', 'records_processed', 'records_failed']].rename(columns={
                    'timestamp': '–í—Ä–µ–º—è',
                    'operation_type': '–û–ø–µ—Ä–∞—Ü–∏—è',
                    'status_formatted': '–°—Ç–∞—Ç—É—Å',
                    'records_processed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                    'records_failed': '–û—à–∏–±–æ–∫'
                }),
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
        
        st.divider()
        
        # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ü–µ–Ω–∞–º
        st.subheader("üíé –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–°–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ**")
            if products_with_prices:
                top_expensive = sorted(products_with_prices, key=lambda x: x.get('price', 0) or 0, reverse=True)[:5]
                for idx, item in enumerate(top_expensive, 1):
                    st.write(f"{idx}. {item.get('brand', 'N/A')} - {item.get('price', 0):.2f} ‚ÇΩ")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        with col2:
            st.markdown("**–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏**")
            if products_with_prices:
                top_discounts = sorted(products_with_prices, key=lambda x: x.get('discount', 0) or 0, reverse=True)[:5]
                for idx, item in enumerate(top_discounts, 1):
                    st.write(f"{idx}. {item.get('brand', 'N/A')} - {item.get('discount', 0)}%")
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
# =============================================================================
elif page == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è":
    st.title("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()
    
    st.markdown("""
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    - **–ê—Ä—Ç–∏–∫—É–ª—ã**: Content Cards API ‚Üí –ë–î
    - **–¶–µ–Ω—ã**: Discounts-Prices API ‚Üí –ë–î
    """)
    
    st.divider()
    
    # –ê—Ä—Ç–∏–∫—É–ª—ã
    st.subheader("üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        max_cards = st.number_input(
            "–ú–∞–∫—Å–∏–º—É–º –∫–∞—Ä—Ç–æ—á–µ–∫ (0 = –≤—Å–µ)",
            min_value=0,
            value=100,
            step=50,
            help="–î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
    
    with col2:
        st.write("")
        st.write("")
        sync_articles_btn = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", key="sync_articles", type="primary")
    
    if sync_articles_btn:
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤..."):
            try:
                from wb_api.content_cards import WBContentCardsClient, API_KEY
                
                api_client = WBContentCardsClient(API_KEY)
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API...")
                progress_bar.progress(30)
                
                stats = sync_content_cards_to_db(
                    api_client=api_client,
                    db_client=st.session_state.db_client,
                    max_cards=max_cards if max_cards > 0 else None
                )
                
                progress_bar.progress(100)
                status_text.text("–ì–æ—Ç–æ–≤–æ!")
                
                time.sleep(0.5)
                progress_bar.empty()
                status_text.empty()
                
                if stats['failed'] == 0:
                    st.success(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–£—Å–ø–µ—à–Ω–æ", stats['success'])
                with col2:
                    st.metric("–û—à–∏–±–æ–∫", stats['failed'])
                with col3:
                    st.metric("–í—Å–µ–≥–æ –±–∞—Ä–∫–æ–¥–æ–≤", stats['total_variants'])
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.divider()
    
    # –¶–µ–Ω—ã
    st.subheader("üí∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω")
    
    col1, col2 = st.columns([3, 1])
    with col1:
        max_goods = st.number_input(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤ (0 = –≤—Å–µ)",
            min_value=0,
            value=50,
            step=50,
            help="–î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
    
    with col2:
        st.write("")
        st.write("")
        sync_prices_btn = st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", key="sync_prices", type="primary")
    
    if sync_prices_btn:
        with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω..."):
            try:
                from wb_api.discounts_prices.discounts_prices import WBDiscountsPricesClient
                
                api_client = WBDiscountsPricesClient()
                
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                status_text.text("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WB API...")
                progress_bar.progress(30)
                
                stats = sync_discounts_prices_to_db(
                    api_client=api_client,
                    db_client=st.session_state.db_client,
                    max_goods=max_goods if max_goods > 0 else None
                )
                
                progress_bar.progress(100)
                status_text.text("–ì–æ—Ç–æ–≤–æ!")
                
                time.sleep(0.5)
                progress_bar.empty()
                status_text.empty()
                
                if stats['failed'] == 0:
                    st.success(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.warning(f"‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("–£—Å–ø–µ—à–Ω–æ", stats['success'])
                with col2:
                    st.metric("–û—à–∏–±–æ–∫", stats['failed'])
            
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# =============================================================================
# –¢–û–í–ê–†–´
# =============================================================================
elif page == "üì¶ –¢–æ–≤–∞—Ä—ã":
    st.title("üì¶ –¢–æ–≤–∞—Ä—ã")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        search_nm_id = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ nmID", placeholder="12345678")
    
    with col2:
        search_vendor = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –ø—Ä–æ–¥–∞–≤—Ü–∞", placeholder="ART-001")
    
    with col3:
        search_brand = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É", placeholder="MyBrand")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        products = db.get_active_products()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if search_nm_id:
            products = [p for p in products if str(p.get('nm_id', '')).startswith(search_nm_id)]
        if search_vendor:
            products = [p for p in products if search_vendor.lower() in str(p.get('vendor_code', '')).lower()]
        if search_brand:
            products = [p for p in products if search_brand.lower() in str(p.get('brand', '')).lower()]
        
        st.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if products:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame
            df = pd.DataFrame(products)
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_columns = ['nm_id', 'vendor_code', 'brand', 'title', 'subject', 'volume', 'updated_at']
            available_columns = [col for col in display_columns if col in df.columns]
            
            if 'updated_at' in df.columns:
                df['updated_at'] = pd.to_datetime(df['updated_at']).dt.strftime('%Y-%m-%d %H:%M')
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            column_names = {
                'nm_id': 'nmID',
                'vendor_code': '–ê—Ä—Ç–∏–∫—É–ª',
                'brand': '–ë—Ä–µ–Ω–¥',
                'title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
                'subject': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                'volume': '–õ–∏—Ç—Ä–∞–∂',
                'updated_at': '–û–±–Ω–æ–≤–ª–µ–Ω–æ'
            }
            
            df_display = df[available_columns].rename(columns=column_names)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            st.dataframe(
                df_display,
                use_container_width=True,
                hide_index=True
            )
            
            # –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            st.divider()
            st.subheader("üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞")
            
            selected_nm_id = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä",
                options=[p['nm_id'] for p in products],
                format_func=lambda x: f"{x} - {next((p['brand'] for p in products if p['nm_id'] == x), 'N/A')}"
            )
            
            if selected_nm_id:
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
                product = next((p for p in products if p['nm_id'] == selected_nm_id), None)
                if product:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**")
                        st.write(f"**nmID:** {product.get('nm_id')}")
                        st.write(f"**–ê—Ä—Ç–∏–∫—É–ª:** {product.get('vendor_code')}")
                        st.write(f"**–ë—Ä–µ–Ω–¥:** {product.get('brand')}")
                        st.write(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product.get('subject')}")
                    
                    with col2:
                        st.markdown("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ**")
                        st.write(f"**–õ–∏—Ç—Ä–∞–∂:** {product.get('volume', 0)} –ª")
                        st.write(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'–î–∞' if product.get('active') else '–ù–µ—Ç'}")
                        st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {product.get('updated_at')}")
                    
                    # –ë–∞—Ä–∫–æ–¥—ã
                    st.markdown("**–ë–∞—Ä–∫–æ–¥—ã –∏ —Ä–∞–∑–º–µ—Ä—ã**")
                    barcodes = db.get_active_barcodes(nm_id=selected_nm_id)
                    if barcodes:
                        barcodes_df = pd.DataFrame(barcodes)
                        st.dataframe(
                            barcodes_df[['barcode', 'size']].rename(columns={
                                'barcode': '–®—Ç—Ä–∏—Ö–∫–æ–¥',
                                'size': '–†–∞–∑–º–µ—Ä'
                            }),
                            use_container_width=True,
                            hide_index=True
                        )
                    else:
                        st.info("–ù–µ—Ç –±–∞—Ä–∫–æ–¥–æ–≤")
        
        else:
            st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –¶–ï–ù–´
# =============================================================================
elif page == "üí∞ –¶–µ–Ω—ã":
    st.title("üí∞ –¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filter_competitive = st.checkbox("–¢–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π")
    
    with col2:
        filter_promotions = st.checkbox("–¢–æ–ª—å–∫–æ —Å –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏")
    
    with col3:
        min_discount = st.slider("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ (%)", 0, 100, 0)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        products = db.get_products_with_prices()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        if filter_competitive:
            products = [p for p in products if p.get('is_competitive_price')]
        if filter_promotions:
            products = [p for p in products if p.get('has_promotions')]
        if min_discount > 0:
            products = [p for p in products if (p.get('discount', 0) or 0) >= min_discount]
        
        st.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
        
        if products:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DataFrame
            df = pd.DataFrame(products)
            
            # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫
            display_columns = [
                'nm_id', 'vendor_code', 'brand', 'price', 'discounted_price',
                'discount', 'discount_on_site', 'price_after_spp', 'competitive_price'
            ]
            available_columns = [col for col in display_columns if col in df.columns]
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
            column_names = {
                'nm_id': 'nmID',
                'vendor_code': '–ê—Ä—Ç–∏–∫—É–ª',
                'brand': '–ë—Ä–µ–Ω–¥',
                'price': '–¶–µ–Ω–∞',
                'discounted_price': '–°–æ —Å–∫–∏–¥–∫–æ–π',
                'discount': '–°–∫–∏–¥–∫–∞ %',
                'discount_on_site': '–°–ü–ü %',
                'price_after_spp': '–ü–æ—Å–ª–µ –°–ü–ü',
                'competitive_price': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è'
            }
            
            df_display = df[available_columns].rename(columns=column_names)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
            for col in ['–¶–µ–Ω–∞', '–°–æ —Å–∫–∏–¥–∫–æ–π', '–ü–æ—Å–ª–µ –°–ü–ü', '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è']:
                if col in df_display.columns:
                    df_display[col] = df_display[col].apply(lambda x: f"{x:.2f}" if x and x != 99999 else "-")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.dataframe(
                df_display,
                use_container_width=True,
                hide_index=True
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.divider()
            st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            col1, col2, col3, col4 = st.columns(4)
            
            prices = [p.get('price', 0) or 0 for p in products if p.get('price')]
            discounts = [p.get('discount', 0) or 0 for p in products if p.get('discount')]
            
            with col1:
                if prices:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{sum(prices) / len(prices):.2f} ‚ÇΩ")
                else:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "-")
            
            with col2:
                if discounts:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", f"{sum(discounts) / len(discounts):.1f}%")
                else:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞", "-")
            
            with col3:
                competitive_count = sum(1 for p in products if p.get('is_competitive_price'))
                st.metric("–° –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Ü–µ–Ω–æ–π", competitive_count)
            
            with col4:
                promo_count = sum(1 for p in products if p.get('has_promotions'))
                st.metric("–° –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—è–º–∏", promo_count)
        
        else:
            st.info("–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# =============================================================================
# –ò–°–¢–û–†–ò–Ø –¶–ï–ù
# =============================================================================
elif page == "üìà –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω":
    st.title("üìà –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()
    
    st.info("üìå –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å—ã –∏–∑ database/queries.sql")

# =============================================================================
# –õ–û–ì–ò
# =============================================================================
elif page == "üìù –õ–æ–≥–∏":
    st.title("üìù –õ–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–π")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 10, 100, 20, step=10)
    
    try:
        logs = db.get_recent_logs(limit=limit)
        
        if logs:
            df = pd.DataFrame(logs)
            df['timestamp'] = pd.to_datetime(df['timestamp']).dt.strftime('%Y-%m-%d %H:%M:%S')
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_filter = st.multiselect(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                options=['success', 'warning', 'error'],
                default=['success', 'warning', 'error'],
                format_func=lambda x: {'success': '‚úÖ –£—Å–ø–µ—à–Ω–æ', 'warning': '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 'error': '‚ùå –û—à–∏–±–∫–∞'}[x]
            )
            
            if status_filter:
                df = df[df['status'].isin(status_filter)]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            st.dataframe(
                df[['timestamp', 'operation_type', 'status', 'records_processed', 'records_failed', 'execution_time_ms']].rename(columns={
                    'timestamp': '–í—Ä–µ–º—è',
                    'operation_type': '–û–ø–µ—Ä–∞—Ü–∏—è',
                    'status': '–°—Ç–∞—Ç—É—Å',
                    'records_processed': '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ',
                    'records_failed': '–û—à–∏–±–æ–∫',
                    'execution_time_ms': '–í—Ä–µ–º—è (–º—Å)'
                }),
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤: {e}")

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================================================
elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session state
    if not init_session_state():
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    if not st.session_state.db_connected:
        st.error("‚ùå –ë–î –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        st.stop()

    db = st.session_state.db_client
    
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (>30 –¥–Ω–µ–π)**")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", type="secondary"):
            with st.spinner("–û—á–∏—Å—Ç–∫–∞..."):
                try:
                    deleted = db.cleanup_old_logs()
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    with col2:
        st.markdown("**–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (>90 –¥–Ω–µ–π)**")
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
            with st.spinner("–û—á–∏—Å—Ç–∫–∞..."):
                try:
                    deleted = db.cleanup_old_price_history()
                    st.success(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    st.divider()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
    
    st.code(f"""
URL: {db.url}
Key: {db.key[:20]}...{db.key[-20:]}
    """)
    
    st.divider()
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    st.subheader("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    
    st.markdown("""
    - [database/README.md](./database/README.md) - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    - [database/SETUP.md](./database/SETUP.md) - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
    - [database/queries.sql](./database/queries.sql) - SQL –∑–∞–ø—Ä–æ—Å—ã
    - [Supabase Dashboard](https://app.supabase.com)
    """)


# =============================================================================
# –ê–í–¢–û–ó–ê–ü–£–°–ö STREAMLIT
# =============================================================================
if __name__ == "__main__":
    import subprocess
    import sys
    import os

    # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Streamlit –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
    subprocess.run([sys.executable, "-m", "streamlit", "run", __file__], check=True)


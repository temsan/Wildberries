#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Discounts-Prices —Å –ë–î.
–ó–∞–º–µ–Ω—è–µ—Ç Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.
"""

import sys
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.integrations.discounts_prices_enhanced import DiscountsPricesDBProcessor


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Discounts-Prices —Å –ë–î')
    
    parser.add_argument(
        '--max-goods', 
        type=int, 
        default=None,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    
    parser.add_argument(
        '--batch-size', 
        type=int, 
        default=50,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 50)'
    )
    
    parser.add_argument(
        '--sleep', 
        type=float, 
        default=1.0,
        help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0)'
    )
    
    parser.add_argument(
        '--export', 
        type=str, 
        default=None,
        help='–ü—É—Ç—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ JSON'
    )
    
    parser.add_argument(
        '--analytics', 
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
    )
    
    parser.add_argument(
        '--test-only', 
        action='store_true',
        help='–¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'
    )
    
    args = parser.parse_args()
    
    print("üöÄ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø DISCOUNTS-PRICES –° –ë–î")
    print("=" * 50)
    print(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤: {args.max_goods or '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}")
    print(f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {args.batch_size}")
    print(f"–ó–∞–¥–µ—Ä–∂–∫–∞: {args.sleep}—Å")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    processor = DiscountsPricesDBProcessor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    connections = processor.test_connections()
    
    if not connections['database']:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ api_keys.py")
        return 1
    
    if not connections['api']:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Discounts-Prices API")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ api_keys.py")
        return 1
    
    print("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    if args.test_only:
        print("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return 0
    
    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        stats = processor.sync_prices_to_db(
            max_goods=args.max_goods,
            batch_size=args.batch_size,
            sleep_seconds=args.sleep
        )
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats['total']}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats['success']}")
        print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {stats['failed']}")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è: {stats['execution_time_ms']/1000:.2f}—Å")
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if args.analytics:
            print("\nüìà –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É...")
            analytics = processor.get_price_analytics(days=7)
            
            if 'error' not in analytics:
                stats_data = analytics['statistics']
                print(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats_data.get('total_products', 0)}")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {stats_data.get('avg_price', 0):.2f} ‚ÇΩ")
                print(f"   ‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏: {stats_data.get('products_with_discount', 0)}")
                print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–∏–¥–∫–∞: {stats_data.get('avg_discount', 0):.1f}%")
                print(f"   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω: {len(analytics['price_changes'])}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {analytics['error']}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        if args.export:
            print(f"\nüì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ {args.export}...")
            export_success = processor.export_to_json(args.export, args.max_goods)
            
            if export_success:
                print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
            else:
                print("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")
        
        print("\nüéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())

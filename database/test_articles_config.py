#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é: nmID ‚Üí vendorCode ‚Üí barcodes
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.integrations.discounts_prices_enhanced import DiscountsPricesDBProcessor


def test_articles_hierarchy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –∞—Ä—Ç–∏–∫—É–ª–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ê–†–¢–ò–ö–£–õ–û–í")
    print("=" * 60)
    print("–ò–µ—Ä–∞—Ä—Ö–∏—è: nmID ‚Üí vendorCode ‚Üí barcodes (—Ä–∞–∑–º–µ—Ä—ã)")
    print("–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: –ü–†–û–°–¢–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏)")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    processor = DiscountsPricesDBProcessor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    connections = processor.test_connections()
    if not connections['database']:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    test_items = [
        {
            'nmID': 12345,
            'vendorCode': 'NIK-001',
            'brand': 'Nike',
            'title': '–§—É—Ç–±–æ–ª–∫–∞ Nike Sport',
            'subject': '–û–¥–µ–∂–¥–∞',
            'volume': 0.1,
            'barcodes': ['1234567890123', '1234567890124', '1234567890125'],
            'size': 'M'
        },
        {
            'nmID': 67890,
            'vendorCode': 'AD-002',
            'brand': 'Adidas',
            'title': '–ö—Ä–æ—Å—Å–æ–≤–∫–∏ Adidas Ultra',
            'subject': '–û–±—É–≤—å',
            'volume': 0.5,
            'barcodes': ['9876543210987', '9876543210988'],
            'size': '42'
        }
    ]
    
    print(f"\nüì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(test_items)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞...")
    
    for i, item in enumerate(test_items, 1):
        print(f"\n{i}. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ nmID={item['nmID']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        processed = processor.process_price_data(item)
        
        print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª: {processed['nm_id']}")
        print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {processed['vendor_code']}")
        print(f"   ‚Ä¢ –ë—Ä–µ–Ω–¥: {processed['brand']}")
        print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {processed['title'][:50]}...")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä–æ–≤: {len(processed['variants'])}")
        
        for variant in processed['variants']:
            print(f"     - –ë–∞—Ä–∫–æ–¥: {variant['barcode']} (—Ä–∞–∑–º–µ—Ä: {variant['size']})")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    print(f"\nüìä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î...")
    
    try:
        # 1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        stats_query = """
        SELECT 
            COUNT(*) as total_products,
            COUNT(DISTINCT nm_id) as unique_articles,
            AVG(volume) as avg_volume
        FROM products
        WHERE active = true
        """
        
        stats_result = processor.db_client.client.rpc('exec_sql', {'sql': stats_query}).execute()
        if stats_result.data:
            stats = stats_result.data[0]
            print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤:")
            print(f"      ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}")
            print(f"      ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {stats.get('unique_articles', 0)}")
            print(f"      ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {stats.get('avg_volume', 0):.2f} –ª")
        
        # 2. –¢–æ–ø –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º
        top_query = """
        SELECT 
            p.nm_id,
            p.vendor_code,
            p.brand,
            p.title,
            COUNT(sa.id) as sizes_count
        FROM products p
        LEFT JOIN seller_articles sa ON p.nm_id = sa.nm_id
        WHERE p.active = true
        GROUP BY p.nm_id, p.vendor_code, p.brand, p.title
        ORDER BY sizes_count DESC
        LIMIT 5
        """
        
        top_result = processor.db_client.client.rpc('exec_sql', {'sql': top_query}).execute()
        if top_result.data:
            print(f"\n   üèÜ –¢–æ–ø –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–º–µ—Ä–æ–≤:")
            for i, item in enumerate(top_result.data[:3], 1):
                print(f"      {i}. nmID {item['nm_id']} ({item['vendor_code']}): {item['sizes_count']} —Ä–∞–∑–º–µ—Ä–æ–≤")
                print(f"         –ë—Ä–µ–Ω–¥: {item['brand']}")
                print(f"         –ù–∞–∑–≤–∞–Ω–∏–µ: {item['title'][:40]}...")
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:")
    print(f"   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (nmID)")
    print(f"   ‚Ä¢ –ë–∞—Ä–∫–æ–¥ = —Ä–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (M, L, XL)")
    print(f"   ‚Ä¢ –¶–µ–Ω—ã –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤")
    print(f"   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏)")
    print(f"   ‚Ä¢ –ó–∞–∫—É–ø–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É —Ü–µ–ª–∏–∫–æ–º")


if __name__ == "__main__":
    test_articles_hierarchy()

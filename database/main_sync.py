"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö WB API —Å –ë–î Supabase.
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: Content Cards + Discounts-Prices ‚Üí Database ‚Üí Google Sheets.
"""

from pathlib import Path
import sys
import argparse
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.db_client import get_client
from database.integrations.content_cards_db import sync_content_cards_to_db
from database.integrations.discounts_prices_db import sync_discounts_prices_to_db
from wb_api.content_cards import WBContentCardsClient, API_KEY
from wb_api.discounts_prices.discounts_prices import WBDiscountsPricesClient


def sync_articles_to_db(max_cards: Optional[int] = None) -> dict:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ (Content Cards API ‚Üí –ë–î).
    
    Args:
        max_cards: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    print("\n" + "="*70)
    print("üì¶ –®–ê–ì 1: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ê–†–¢–ò–ö–£–õ–û–í (Content Cards API)")
    print("="*70 + "\n")
    
    api_client = WBContentCardsClient(API_KEY)
    db_client = get_client()
    
    stats = sync_content_cards_to_db(
        api_client=api_client,
        db_client=db_client,
        max_cards=max_cards
    )
    
    return stats


def sync_prices_to_db(max_goods: Optional[int] = None) -> dict:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω (Discounts-Prices API ‚Üí –ë–î).
    
    Args:
        max_goods: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    print("\n" + "="*70)
    print("üí∞ –®–ê–ì 2: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –¶–ï–ù (Discounts-Prices API)")
    print("="*70 + "\n")
    
    api_client = WBDiscountsPricesClient()
    db_client = get_client()
    
    stats = sync_discounts_prices_to_db(
        api_client=api_client,
        db_client=db_client,
        max_goods=max_goods
    )
    
    return stats


def export_to_sheets(sheet_id: Optional[str] = None):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ Google Sheets.
    
    Args:
        sheet_id: ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
    """
    print("\n" + "="*70)
    print("üìä –®–ê–ì 3: –≠–ö–°–ü–û–†–¢ –í GOOGLE SHEETS")
    print("="*70 + "\n")
    
    db_client = get_client()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ view
    data = db_client.get_active_articles_for_export()
    
    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ –ë–î: {len(data)} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —Ü–µ–Ω–∞–º–∏")
    
    if not data:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Google Sheets
    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–ø–µ—Ä–≤—ã–µ 3):")
    for idx, item in enumerate(data[:3], 1):
        print(f"  {idx}. nmID={item.get('nm_id')}, barcode={item.get('barcode')}, "
              f"price={item.get('price')}, price_after_spp={item.get('price_after_spp')}")
    
    print(f"\n‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –≤ Google Sheets")
    print(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ google_sheets_writer –¥–ª—è –∑–∞–ø–∏—Å–∏")


def show_statistics():
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î.
    """
    print("\n" + "="*70)
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("="*70 + "\n")
    
    db_client = get_client()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    products = db_client.get_active_products()
    barcodes = db_client.get_active_barcodes()
    products_with_prices = db_client.get_products_with_prices()
    
    print(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    print(f"üè∑Ô∏è  –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤: {len(barcodes)}")
    print(f"üí∞ –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏: {len(products_with_prices)}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    logs = db_client.get_recent_logs(limit=5)
    print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
    for log in logs:
        status_emoji = "‚úÖ" if log['status'] == 'success' else "‚ö†Ô∏è" if log['status'] == 'warning' else "‚ùå"
        print(f"   {status_emoji} {log['operation_type']}: {log['records_processed']} –∑–∞–ø–∏—Å–µ–π, "
              f"—Å—Ç–∞—Ç—É—Å={log['status']}, –≤—Ä–µ–º—è={log.get('execution_time_ms', 0)}–º—Å")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    parser = argparse.ArgumentParser(
        description="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö WB API —Å –ë–î Supabase"
    )
    parser.add_argument(
        '--mode',
        choices=['full', 'articles', 'prices', 'export', 'stats'],
        default='full',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: full (–≤—Å—ë), articles (—Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã), prices (—Ç–æ–ª—å–∫–æ —Ü–µ–Ω—ã), export (—ç–∫—Å–ø–æ—Ä—Ç –≤ Sheets), stats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)'
    )
    parser.add_argument(
        '--max-cards',
        type=int,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    parser.add_argument(
        '--max-goods',
        type=int,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
    )
    parser.add_argument(
        '--sheet-id',
        type=str,
        help='ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'
    )
    
    args = parser.parse_args()
    
    print("\n" + "="*70)
    print("üöÄ WILDBERRIES API ‚Üí SUPABASE DATABASE SYNC")
    print("="*70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    db_client = get_client()
    if not db_client.test_connection():
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ api_keys.py")
        return 1
    
    try:
        if args.mode == 'full':
            # –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            articles_stats = sync_articles_to_db(max_cards=args.max_cards)
            prices_stats = sync_prices_to_db(max_goods=args.max_goods)
            export_to_sheets(sheet_id=args.sheet_id)
            show_statistics()
            
            print("\n" + "="*70)
            print("‚úÖ –ü–û–õ–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
            print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª–æ–≤: {articles_stats['success']} —É—Å–ø–µ—à–Ω–æ, {articles_stats['failed']} –æ—à–∏–±–æ–∫")
            print(f"   ‚Ä¢ –¶–µ–Ω: {prices_stats['success']} —É—Å–ø–µ—à–Ω–æ, {prices_stats['failed']} –æ—à–∏–±–æ–∫")
            print("="*70 + "\n")
        
        elif args.mode == 'articles':
            # –¢–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã
            stats = sync_articles_to_db(max_cards=args.max_cards)
            print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
        
        elif args.mode == 'prices':
            # –¢–æ–ª—å–∫–æ —Ü–µ–Ω—ã
            stats = sync_prices_to_db(max_goods=args.max_goods)
            print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
        
        elif args.mode == 'export':
            # –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç
            export_to_sheets(sheet_id=args.sheet_id)
        
        elif args.mode == 'stats':
            # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            show_statistics()
        
        return 0
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    exit(main())


#!/usr/bin/env python3
"""
üöÄ –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –¢–û–ß–ö–ê –ó–ê–ü–£–°–ö–ê –ú–ò–ì–†–ê–¶–ò–ô
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ Supabase
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

try:
    from supabase import create_client, Client
    import api_keys
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install supabase")
    sys.exit(1)

def get_supabase_client() -> Client:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Supabase"""
    try:
        url = api_keys.SUPABASE_URL
        key = api_keys.SUPABASE_KEY
        
        if not url or not key:
            raise ValueError("SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
        return create_client(url, key)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        sys.exit(1)

def run_migration(client: Client, migration_file: str):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_path = Path(__file__).parent / "migrations" / migration_file
        
        if not migration_path.exists():
            print(f"–§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {migration_path}")
            return False
            
        with open(migration_path, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        print(f"–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration_file}")
        print("-" * 50)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º SQL
        result = client.rpc('exec_sql', {'sql': sql_content}).execute()
        
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        print()
        print("–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard")
        print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   {migration_path}")
        print("4. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL")
        print()
        print("–°–û–î–ï–†–ñ–ò–ú–û–ï –ú–ò–ì–†–ê–¶–ò–ò:")
        print("-" * 50)
        try:
            with open(migration_path, 'r', encoding='utf-8') as f:
                print(f.read())
        except Exception as read_error:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: {read_error}")
        print("-" * 50)
        return False

def get_migration_files():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    migrations_dir = Path(__file__).parent / "migrations"
    if not migrations_dir.exists():
        return []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ .sql —Ñ–∞–π–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    migration_files = sorted(migrations_dir.glob("*.sql"))
    return [f.name for f in migration_files]

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–û–ë–©–ò–ô –°–ö–†–ò–ü–¢ –ó–ê–ü–£–°–ö–ê –ú–ò–ì–†–ê–¶–ò–ô")
    print("=" * 50)
    print("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = get_supabase_client()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    print()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
    migrations = get_migration_files()

    if not migrations:
        print("‚ùå –ù–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ migrations/")
        sys.exit(1)

    print(f"–ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migrations)}")
    print("–§–∞–π–ª—ã:", ", ".join(migrations))
    print()

    success_count = 0

    for migration in migrations:
        print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {migration}")

        if run_migration(client, migration):
            success_count += 1
            print("–£–°–ü–ï–•")
        else:
            print("–û–®–ò–ë–ö–ê")

        print("-" * 50)
        print()

    print("–†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {success_count}/{len(migrations)}")

    if success_count == len(migrations):
        print("–í–°–ï –ú–ò–ì–†–ê–¶–ò–ò –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if "001_fix_security_issues.sql" in migrations:
            print()
            print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
            print("  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: –¥–æ–±–∞–≤–ª–µ–Ω SET search_path = public")
            print("  ‚Ä¢ RLS –ø–æ–ª–∏—Ç–∏–∫–∏: –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏")
            print("  ‚Ä¢ Views: –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã –±–µ–∑ SECURITY DEFINER")
            print()
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print("  ‚Ä¢ Function Search Path Mutable: –ò–°–ü–†–ê–í–õ–ï–ù–û")
            print("  ‚Ä¢ Multiple Permissive Policies: –ò–°–ü–†–ê–í–õ–ï–ù–û")
            print("  ‚Ä¢ Security Definer View: –ò–°–ü–†–ê–í–õ–ï–ù–û")
            print()
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Database Linter –≤ Supabase - –æ—à–∏–±–∫–∏ –∏—Å—á–µ–∑–ª–∏!")
    else:
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")
        sys.exit(1)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –ú–∞–∫–∞—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
from pathlib import Path
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False


def check_table_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ú–∞–∫–∞—Ä–∞"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´ –ú–ê–ö–ê–†–ê")
    print("=" * 60)
    print("–¢–∞–±–ª–∏—Ü–∞: https://docs.google.com/spreadsheets/d/1Aufum97SY2fChBKNyzP0tslUYbCQ6cCd41EkoEo05SM/edit")
    print("=" * 60)
    
    if not GOOGLE_SHEETS_AVAILABLE:
        print("‚ùå Google Sheets API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth")
        return
    
    # ID —Ç–∞–±–ª–∏—Ü—ã –ú–∞–∫–∞—Ä–∞
    SPREADSHEET_ID = "1Aufum97SY2fChBKNyzP0tslUYbCQ6cCd41EkoEo05SM"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        credentials_path = BASE_DIR / "credentials.json"
        if not credentials_path.exists():
            print("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ Service Account –∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
            print("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://developers.google.com/sheets/api/quickstart/python")
            return
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
        credentials = service_account.Credentials.from_service_account_file(
            str(credentials_path), scopes=SCOPES
        )
        service = build('sheets', 'v4', credentials=credentials)
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
        print("\nüìã –ß–∏—Ç–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ A1:Z20 (–∑–∞–≥–æ–ª–æ–≤–∫–∏ + –ø—Ä–∏–º–µ—Ä—ã)
        range_name = 'A1:Z20'
        sheet = service.spreadsheets()
        result = sheet.values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=range_name
        ).execute()
        
        values = result.get('values', [])
        
        if not values:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        print(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(values)} —Å—Ç—Ä–æ–∫")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        analyze_table_structure(values)
        
    except HttpError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Google Sheets API: {e}")
        if "PERMISSION_DENIED" in str(e):
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   1. –§–∞–π–ª credentials.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
            print("   2. Service Account –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É")
            print("   3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: Viewer")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def analyze_table_structure(values: List[List[str]]):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –¢–ê–ë–õ–ò–¶–´")
    print("-" * 40)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
    headers = values[0] if values else []
    print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ ({len(headers)} –∫–æ–ª–æ–Ω–æ–∫):")
    for i, header in enumerate(headers):
        if header:
            print(f"   {i+1:2d}. {header}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–û –¢–ò–ü–£ –•–†–ê–ù–ï–ù–ò–Ø:")
    
    time_series_columns = []
    simple_update_columns = []
    
    for header in headers:
        if not header:
            continue
            
        header_lower = header.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
        time_series_keywords = [
            '–∫–æ–Ω–≤–µ—Ä—Å–∏–∏', '–∑–∞–∫–∞–∑—ã', '–ø—Ä–æ–¥–∞–∂–∏', '–æ—Å—Ç–∞—Ç–∫–∏', '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å',
            '—Ä–µ–∫–ª–∞–º–Ω—ã–µ', '–∫–∞–º–ø–∞–Ω–∏–∏', '–æ—Ç—á–µ—Ç', '–∏—Å—Ç–æ—Ä–∏—è', '–¥–∏–Ω–∞–º–∏–∫–∞',
            '—Ç—Ä–µ–Ω–¥', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '—Ä–æ—Å—Ç', '—Å–Ω–∏–∂–µ–Ω–∏–µ'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        simple_keywords = [
            '–ø—Ä–æ–¥—É–∫—Ç', '–∞—Ä—Ç–∏–∫—É–ª', '–±–∞—Ä–∫–æ–¥', '—Ä–∞–∑–º–µ—Ä', '–Ω–∞–∑–≤–∞–Ω–∏–µ',
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–±—Ä–µ–Ω–¥', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'
        ]
        
        if any(keyword in header_lower for keyword in time_series_keywords):
            time_series_columns.append(header)
        elif any(keyword in header_lower for keyword in simple_keywords):
            simple_update_columns.append(header)
        else:
            # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å—Ç—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            simple_update_columns.append(header)
    
    print(f"\nüîÑ –í–†–ï–ú–ï–ù–ù–´–ï –†–Ø–î–´ (–Ω—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π):")
    if time_series_columns:
        for col in time_series_columns:
            print(f"   ‚Ä¢ {col}")
    else:
        print("   (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
    
    print(f"\n‚úÖ –ü–†–û–°–¢–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï (—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ):")
    if simple_update_columns:
        for col in simple_update_columns:
            print(f"   ‚Ä¢ {col}")
    else:
        print("   (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    if len(values) > 1:
        print(f"\nüì¶ –ü–†–ò–ú–ï–†–´ –î–ê–ù–ù–´–•:")
        print("-" * 30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        for i, row in enumerate(values[1:4], 1):
            print(f"\n–°—Ç—Ä–æ–∫–∞ {i+1}:")
            for j, value in enumerate(row):
                if j < len(headers) and headers[j] and value:
                    print(f"   ‚Ä¢ {headers[j]}: {value}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–¢–†–£–ö–¢–£–†–ï –ë–î:")
    print("-" * 40)
    
    if time_series_columns:
        print("üìä –¢–∞–±–ª–∏—Ü—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã):")
        print("   CREATE TABLE metrics_history (")
        print("       id BIGSERIAL PRIMARY KEY,")
        print("       nm_id INTEGER,")
        print("       recorded_at TIMESTAMP,")
        for col in time_series_columns:
            col_name = col.lower().replace(' ', '_').replace('-', '_')
            print(f"       {col_name} DECIMAL(10,2),")
        print("   );")
        print()
    
    if simple_update_columns:
        print("üìã –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
        print("   CREATE TABLE products (")
        print("       id BIGSERIAL PRIMARY KEY,")
        print("       nm_id INTEGER UNIQUE,")
        for col in simple_update_columns:
            col_name = col.lower().replace(' ', '_').replace('-', '_')
            print(f"       {col_name} VARCHAR(255),")
        print("       updated_at TIMESTAMP DEFAULT NOW()")
        print("   );")


if __name__ == "__main__":
    check_table_structure()

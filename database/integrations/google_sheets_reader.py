#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ú–∞–∫–∞—Ä–∞
"""

import sys
from pathlib import Path
from typing import List, Dict, Any, Optional
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[2]
sys.path.insert(0, str(BASE_DIR))

try:
    from google.oauth2 import service_account
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    print("‚ö†Ô∏è  Google Sheets API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install google-api-python-client google-auth")


class GoogleSheetsReader:
    """–ß–∏—Ç–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
    
    def __init__(self, credentials_file: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Ç–∞—Ç–µ–ª—è Google Sheets.
        
        Args:
            credentials_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (service account)
        """
        if not GOOGLE_SHEETS_AVAILABLE:
            raise ImportError("Google Sheets API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        self.credentials_file = credentials_file or self._find_credentials_file()
        self.service = None
        self._authenticate()
    
    def _find_credentials_file(self) -> Optional[str]:
        """–ò—â–µ—Ç —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Sheets"""
        possible_paths = [
            BASE_DIR / "credentials.json",
            BASE_DIR / "google_credentials.json", 
            BASE_DIR / "service_account.json",
            BASE_DIR / "database" / "credentials.json",
            BASE_DIR / "database" / "google_credentials.json"
        ]
        
        for path in possible_paths:
            if path.exists():
                return str(path)
        
        return None
    
    def _authenticate(self):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Google Sheets API"""
        if not self.credentials_file:
            raise FileNotFoundError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Sheets. "
                "–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª credentials.json –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞."
            )
        
        try:
            SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
            credentials = service_account.Credentials.from_service_account_file(
                self.credentials_file, scopes=SCOPES
            )
            self.service = build('sheets', 'v4', credentials=credentials)
            print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Google Sheets —É—Å–ø–µ—à–Ω–∞")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Google Sheets: {e}")
    
    def read_spreadsheet(self, spreadsheet_id: str, range_name: str) -> List[List[str]]:
        """
        –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets.
        
        Args:
            spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã Google Sheets
            range_name: –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Sheet1!A1:Z100')
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            sheet = self.service.spreadsheets()
            result = sheet.values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(values)} —Å—Ç—Ä–æ–∫ –∏–∑ Google Sheets")
            return values
            
        except HttpError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Google Sheets: {e}")
            return []
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return []
    
    def read_makar_table(self, spreadsheet_id: str = None) -> Dict[str, Any]:
        """
        –ß–∏—Ç–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ú–∞–∫–∞—Ä–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∞—Ä—Ç–∏–∫—É–ª–æ–≤.
        
        Args:
            spreadsheet_id: ID —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ URL)
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        """
        if not spreadsheet_id:
            # ID –∏–∑ URL –ú–∞–∫–∞—Ä–∞: 1Aufum97SY2fChBKNyzP0tslUYbCQ6cCd41EkoEo05SM
            spreadsheet_id = "1Aufum97SY2fChBKNyzP0tslUYbCQ6cCd41EkoEo05SM"
        
        print(f"üìã –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ú–∞–∫–∞—Ä–∞: {spreadsheet_id}")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
        data = self.read_spreadsheet(spreadsheet_id, 'A1:Z100')
        
        if not data:
            return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã'}
        
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        result = {
            'spreadsheet_id': spreadsheet_id,
            'total_rows': len(data),
            'headers': data[0] if data else [],
            'raw_data': data,
            'parsed_data': self._parse_makar_table(data)
        }
        
        return result
    
    def _parse_makar_table(self, data: List[List[str]]) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –ú–∞–∫–∞—Ä–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        
        Args:
            data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
            
        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        if len(data) < 2:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'}
        
        headers = data[0]
        rows = data[1:]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        structure = {
            'columns': headers,
            'entities': [],
            'time_series': [],
            'simple_update': []
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        for header in headers:
            if header:
                header_lower = header.lower()
                if any(keyword in header_lower for keyword in ['–∫–æ–Ω–≤–µ—Ä—Å–∏–∏', '–∑–∞–∫–∞–∑—ã', '–ø—Ä–æ–¥–∞–∂–∏', '–æ—Å—Ç–∞—Ç–∫–∏', '—Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä–µ–∫–ª–∞–º–Ω—ã–µ']):
                    structure['time_series'].append(header)
                else:
                    structure['simple_update'].append(header)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        for i, row in enumerate(rows):
            if not row or not row[0]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                continue
            
            entity = {
                'row_index': i + 2,  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º —Å 1 –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                'data': {}
            }
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º
            for j, value in enumerate(row):
                if j < len(headers) and headers[j]:
                    entity['data'][headers[j]] = value
            
            structure['entities'].append(entity)
        
        return structure
    
    def export_to_json(self, data: Dict[str, Any], output_file: str) -> bool:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            output_file: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            output_path = BASE_DIR / "exports" / output_file
            output_path.parent.mkdir(exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–Ω—É —è—á–µ–π–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ú–∞–∫–∞—Ä–∞
            test_data = self.read_spreadsheet(
                "1Aufum97SY2fChBKNyzP0tslUYbCQ6cCd41EkoEo05SM", 
                'A1:A1'
            )
            return len(test_data) > 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –ß–¢–ï–ù–ò–Ø –¢–ê–ë–õ–ò–¶–´ –ú–ê–ö–ê–†–ê")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞—Ç–µ–ª—å
        reader = GoogleSheetsReader()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not reader.test_connection():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets")
            return
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å–ø–µ—à–Ω–æ")
        
        # –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ú–∞–∫–∞—Ä–∞
        print("\nüìã –ß–∏—Ç–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ú–∞–∫–∞—Ä–∞...")
        data = reader.read_makar_table()
        
        if 'error' in data:
            print(f"‚ùå –û—à–∏–±–∫–∞: {data['error']}")
            return
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {data['total_rows']}")
        print(f"   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏: {len(data['headers'])}")
        print(f"   ‚Ä¢ –°—É—â–Ω–æ—Å—Ç–µ–π: {len(data['parsed_data']['entities'])}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"\nüìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:")
        for i, header in enumerate(data['headers']):
            print(f"   {i+1}. {header}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è
        parsed = data['parsed_data']
        print(f"\nüîÑ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã:")
        for item in parsed['time_series']:
            print(f"   ‚Ä¢ {item}")
        
        print(f"\n‚úÖ –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:")
        for item in parsed['simple_update']:
            print(f"   ‚Ä¢ {item}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if parsed['entities']:
            print(f"\nüì¶ –ü—Ä–∏–º–µ—Ä—ã —Å—É—â–Ω–æ—Å—Ç–µ–π:")
            for i, entity in enumerate(parsed['entities'][:3]):
                print(f"   {i+1}. –°—Ç—Ä–æ–∫–∞ {entity['row_index']}:")
                for key, value in entity['data'].items():
                    if value:
                        print(f"      ‚Ä¢ {key}: {value}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_file = f"makar_table_{timestamp}.json"
        reader.export_to_json(data, export_file)
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå {e}")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install google-api-python-client google-auth")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()

"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Content Cards API —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
Upsert —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ WBContentCardsClient.
"""

from typing import List, Dict, Any
import time
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
BASE_DIR = Path(__file__).resolve().parents[2]
sys.path.insert(0, str(BASE_DIR))

from database.db_client import get_client


def extract_variants_from_card(card: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã (–±–∞—Ä–∫–æ–¥—ã + —Ä–∞–∑–º–µ—Ä—ã) –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        card: –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ Content API
        
    Returns:
        –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ [{"barcode": "...", "size": "..."}]
    """
    variants = []
    sizes = card.get('sizes', [])
    
    for size_item in sizes:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ techSize –∏–ª–∏ wbSize
        size = size_item.get('techSize', size_item.get('wbSize', '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞'))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞—Ä–∫–æ–¥—ã
        skus = size_item.get('skus', [])
        for sku in skus:
            if isinstance(sku, str):
                barcode = sku.strip()
            elif isinstance(sku, dict):
                barcode = str(sku.get('barcode', '')).strip()
            else:
                continue
            
            if barcode:
                variants.append({"barcode": barcode, "size": size})
    
    return variants


def calculate_volume_from_dimensions(dimensions: Dict[str, Any]) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º –∏–∑ dimensions.
    
    Args:
        dimensions: –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ {length, width, height} –≤ —Å–º
        
    Returns:
        –û–±—ä–µ–º –≤ –ª–∏—Ç—Ä–∞—Ö
    """
    if not dimensions:
        return 0.0
    
    length = dimensions.get('length', 0)
    width = dimensions.get('width', 0)
    height = dimensions.get('height', 0)
    
    # –°–º¬≥ ‚Üí –ª–∏—Ç—Ä—ã (1 –ª–∏—Ç—Ä = 1000 —Å–º¬≥)
    volume_cm3 = length * width * height
    volume_liters = volume_cm3 / 1000
    
    return round(volume_liters, 3)


def upsert_cards_to_db(cards: List[Dict[str, Any]], db_client=None) -> Dict[str, int]:
    """
    Upsert –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î.
    
    Args:
        cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ WBContentCardsClient.iterate_all_cards()
        db_client: –ö–ª–∏–µ–Ω—Ç –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success: int, failed: int, total_variants: int}
    """
    if db_client is None:
        db_client = get_client()
    
    start_time = time.time()
    success_count = 0
    failed_count = 0
    total_variants = 0
    failed_items = []
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º upsert {len(cards)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î...")
    
    for idx, card in enumerate(cards, 1):
        try:
            nm_id = card.get('nmID')
            if not nm_id:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ #{idx}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç nmID")
                failed_count += 1
                continue
            
            vendor_code = str(card.get('vendorCode', '')).strip()
            if not vendor_code:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ #{idx} (nmID={nm_id}): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç vendorCode")
                failed_count += 1
                continue
            
            brand = card.get('brand', '')
            title = card.get('title', '')
            subject = card.get('subjectName', '')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º
            dimensions = card.get('dimensions', {})
            volume = calculate_volume_from_dimensions(dimensions)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = extract_variants_from_card(card)
            
            if not variants:
                print(f"‚ö†Ô∏è  –¢–æ–≤–∞—Ä {nm_id} –Ω–µ –∏–º–µ–µ—Ç –±–∞—Ä–∫–æ–¥–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                failed_count += 1
                continue
            
            # Upsert —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ë–î
            db_client.upsert_product_with_variants(
                nm_id=nm_id,
                vendor_code=vendor_code,
                brand=brand,
                title=title,
                subject=subject,
                volume=volume,
                variants=variants
            )
            
            success_count += 1
            total_variants += len(variants)
            
            if idx % 50 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{len(cards)} ({success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫)")
        
        except Exception as e:
            failed_count += 1
            failed_items.append({'nm_id': card.get('nmID'), 'error': str(e)})
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ upsert —Ç–æ–≤–∞—Ä–∞ {card.get('nmID')}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    execution_time_ms = int((time.time() - start_time) * 1000)
    
    print(f"\n{'='*60}")
    print(f"‚úÖ Upsert –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –±–∞—Ä–∫–æ–¥–æ–≤: {total_variants}")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time_ms}–º—Å ({execution_time_ms/1000:.2f}—Å)")
    print(f"{'='*60}\n")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    status = 'success' if failed_count == 0 else 'warning' if success_count > 0 else 'error'
    
    db_client.log_validation(
        operation_type='fetch_articles',
        status=status,
        records_processed=success_count,
        records_failed=failed_count,
        input_data={'sample': cards[0] if cards else None},
        validation_errors=failed_items if failed_items else None,
        execution_time_ms=execution_time_ms
    )
    
    return {
        'success': success_count,
        'failed': failed_count,
        'total_variants': total_variants
    }


def sync_content_cards_to_db(api_client, db_client=None, max_cards: int = None) -> Dict[str, int]:
    """
    –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î.
    
    Args:
        api_client: WBContentCardsClient instance
        db_client: –ö–ª–∏–µ–Ω—Ç –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        max_cards: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    if db_client is None:
        db_client = get_client()
    
    print("üì• –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WB API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ API
    cards = api_client.iterate_all_cards(
        limit=100,
        sleep_seconds=0.7,
        max_pages=max_cards // 100 if max_cards else None
    )
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(cards)} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API")
    
    if not cards:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return {'success': 0, 'failed': 0, 'total_variants': 0}
    
    # Upsert –≤ –ë–î
    return upsert_cards_to_db(cards, db_client)


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    from wb_api.content_cards import WBContentCardsClient, API_KEY
    
    print("üß™ –¢–ï–°–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Content Cards —Å –ë–î")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    api_client = WBContentCardsClient(API_KEY)
    db_client = get_client()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not db_client.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        exit(1)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–µ—Ä–≤—ã–µ 100 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞)
    stats = sync_content_cards_to_db(
        api_client=api_client,
        db_client=db_client,
        max_cards=100
    )
    
    print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")


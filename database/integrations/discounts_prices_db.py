"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Discounts-Prices API —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
Upsert —Ü–µ–Ω –∏ —Å–∫–∏–¥–æ–∫ –∏–∑ WBDiscountsPricesClient.
"""

from typing import List, Dict, Any
import time
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
BASE_DIR = Path(__file__).resolve().parents[2]
sys.path.insert(0, str(BASE_DIR))

from database.db_client import get_client


def process_price_list(prices: List[Any], field_name: str, nm_id: int) -> float:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω (prices –∏–ª–∏ discountedPrices).
    –õ–æ–≥–∏–∫–∞ –∏–∑ data_processor.py
    
    Args:
        prices: –°–ø–∏—Å–æ–∫ —Ü–µ–Ω
        field_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        nm_id: ID —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
    """
    if not prices:
        return 0.0
    
    if len(prices) == 1:
        return float(prices[0])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ª–∏ –≤—Å–µ —Ü–µ–Ω—ã
    unique_prices = set(prices)
    
    if len(unique_prices) == 1:
        return float(prices[0])
    else:
        # –¶–µ–Ω—ã —Ä–∞–∑–Ω—ã–µ - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
        max_price = max(prices)
        print(f"‚ö†Ô∏è  nmID {nm_id}: –í {field_name} —Ä–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º max={max_price}")
        return float(max_price)


def calculate_price_after_spp(discounted_price: float, discount_on_site: float) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø–æ—Å–ª–µ –°–ü–ü.
    
    Args:
        discounted_price: –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
        discount_on_site: –°–ü–ü (%)
        
    Returns:
        –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –°–ü–ü
    """
    if not discount_on_site or discount_on_site <= 0:
        return discounted_price
    
    price_after_spp = discounted_price * (1 - discount_on_site / 100)
    return round(price_after_spp, 2)


def process_single_item(item: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –∏–∑ API.
    –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∏–∑ data_processor.py
    
    Args:
        item: –¢–æ–≤–∞—Ä –∏–∑ Discounts-Prices API
        
    Returns:
        –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä
    """
    nm_id = item.get('nmID', 0)
    vendor_code = item.get('vendorCode', '')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω
    prices = process_price_list(item.get('prices', []), 'prices', nm_id)
    discounted_prices = process_price_list(item.get('discountedPrices', []), 'discountedPrices', nm_id)
    
    # –°–∫–∏–¥–∫–∏
    discount = item.get('discount', 0)
    discount_on_site = item.get('discountOnSite')
    discount_on_site = discount_on_site if discount_on_site is not None else 0
    
    # –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –°–ü–ü
    price_after_spp = calculate_price_after_spp(discounted_prices, discount_on_site)
    
    # –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ü–µ–Ω–∞
    competitive_price = item.get('competitivePrice', 99999)
    is_competitive_price = item.get('isCompetitivePrice', False)
    
    # –ü—Ä–æ–º–æ-–∞–∫—Ü–∏–∏
    promotions = item.get('promotions', [])
    has_promotions = bool(promotions and len(promotions) > 0)
    
    return {
        'nm_id': nm_id,
        'vendor_code': vendor_code,
        'price': prices,
        'discounted_price': discounted_prices,
        'discount': discount,
        'discount_on_site': discount_on_site,
        'price_after_spp': price_after_spp,
        'competitive_price': competitive_price,
        'is_competitive_price': is_competitive_price,
        'has_promotions': has_promotions
    }


def upsert_prices_to_db(goods: List[Dict[str, Any]], db_client=None) -> Dict[str, int]:
    """
    Upsert —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ë–î —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é.
    
    Args:
        goods: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ WBDiscountsPricesClient.iterate_all_goods()
        db_client: –ö–ª–∏–µ–Ω—Ç –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {success: int, failed: int}
    """
    if db_client is None:
        db_client = get_client()
    
    start_time = time.time()
    success_count = 0
    failed_count = 0
    failed_items = []
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º upsert —Ü–µ–Ω –¥–ª—è {len(goods)} —Ç–æ–≤–∞—Ä–æ–≤...")
    
    for idx, item in enumerate(goods, 1):
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞
            processed = process_single_item(item)
            
            if not processed['nm_id']:
                print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ —Ç–æ–≤–∞—Ä–∞ #{idx}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç nmID")
                failed_count += 1
                continue
            
            # Upsert —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é –ë–î (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é)
            db_client.update_prices_with_history(
                nm_id=processed['nm_id'],
                vendor_code=processed['vendor_code'],
                price=processed['price'],
                discounted_price=processed['discounted_price'],
                discount=processed['discount'],
                discount_on_site=processed['discount_on_site'],
                price_after_spp=processed['price_after_spp'],
                competitive_price=processed['competitive_price'],
                is_competitive_price=processed['is_competitive_price'],
                has_promotions=processed['has_promotions']
            )
            
            success_count += 1
            
            if idx % 50 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {idx}/{len(goods)} ({success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫)")
        
        except Exception as e:
            failed_count += 1
            failed_items.append({'nm_id': item.get('nmID'), 'error': str(e)})
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ upsert —Ü–µ–Ω –¥–ª—è {item.get('nmID')}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    execution_time_ms = int((time.time() - start_time) * 1000)
    
    print(f"\n{'='*60}")
    print(f"‚úÖ Upsert —Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_count}")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time_ms}–º—Å ({execution_time_ms/1000:.2f}—Å)")
    print(f"{'='*60}\n")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
    status = 'success' if failed_count == 0 else 'warning' if success_count > 0 else 'error'
    
    db_client.log_validation(
        operation_type='fetch_prices',
        status=status,
        records_processed=success_count,
        records_failed=failed_count,
        input_data={'sample': goods[0] if goods else None},
        validation_errors=failed_items if failed_items else None,
        execution_time_ms=execution_time_ms
    )
    
    return {
        'success': success_count,
        'failed': failed_count
    }


def sync_discounts_prices_to_db(api_client, db_client=None, max_goods: int = None) -> Dict[str, int]:
    """
    –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –∏–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î.
    
    Args:
        api_client: WBDiscountsPricesClient instance
        db_client: –ö–ª–∏–µ–Ω—Ç –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        max_goods: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    if db_client is None:
        db_client = get_client()
    
    print("üì• –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏ –∏–∑ WB API...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ API
    max_pages = max_goods // 50 if max_goods else None
    
    goods = api_client.iterate_all_goods(
        page_size=50,
        sleep_seconds=1.0,
        max_pages=max_pages
    )
    
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(goods)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API")
    
    if not goods:
        print("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return {'success': 0, 'failed': 0}
    
    # Upsert –≤ –ë–î
    return upsert_prices_to_db(goods, db_client)


def get_price_changes_report(db_client=None, days: int = 7) -> List[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π.
    
    Args:
        db_client: –ö–ª–∏–µ–Ω—Ç –ë–î
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Ü–µ–Ω
    """
    if db_client is None:
        db_client = get_client()
    
    # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    query = f"""
    SELECT 
        ph.nm_id,
        p.vendor_code,
        p.brand,
        COUNT(*) as changes_count,
        MIN(ph.price_after_spp) as min_price,
        MAX(ph.price_after_spp) as max_price,
        AVG(ph.price_after_spp) as avg_price
    FROM price_history ph
    JOIN products p ON ph.nm_id = p.nm_id
    WHERE ph.recorded_at >= NOW() - INTERVAL '{days} days'
    GROUP BY ph.nm_id, p.vendor_code, p.brand
    HAVING COUNT(*) > 1
    ORDER BY changes_count DESC
    """
    
    result = db_client.client.rpc('exec_sql', {'sql': query}).execute()
    return result.data


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    from wb_api.discounts_prices.discounts_prices import WBDiscountsPricesClient
    
    print("üß™ –¢–ï–°–¢: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Discounts-Prices —Å –ë–î")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    api_client = WBDiscountsPricesClient()
    db_client = get_client()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not db_client.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        exit(1)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞)
    stats = sync_discounts_prices_to_db(
        api_client=api_client,
        db_client=db_client,
        max_goods=100
    )
    
    print(f"\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")


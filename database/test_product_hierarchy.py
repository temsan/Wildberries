#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: nmID ‚Üí vendorCode ‚Üí barcodes
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path
BASE_DIR = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(BASE_DIR))

from database.integrations.discounts_prices_enhanced import DiscountsPricesDBProcessor


def test_product_hierarchy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢ –ò–ï–†–ê–†–•–ò–ò –ü–†–û–î–£–ö–¢–û–í")
    print("=" * 50)
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞: nmID ‚Üí vendorCode ‚Üí barcodes")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    processor = DiscountsPricesDBProcessor()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    connections = processor.test_connections()
    if not connections['database']:
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        return
    
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏
    print("\nüìä –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –∏–µ—Ä–∞—Ä—Ö–∏–∏...")
    overview = processor.get_products_overview()
    
    if 'error' in overview:
        print(f"‚ùå –û—à–∏–±–∫–∞: {overview['error']}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    hierarchy = overview['hierarchy_summary']
    print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã (nmID): {hierarchy['products'].get('total_products', 0)}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {hierarchy['products'].get('active_products', 0)}")
    print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª—ã –ø—Ä–æ–¥–∞–≤—Ü–∞: {hierarchy['vendor_codes'].get('unique_vendor_codes', 0)}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –±–∞—Ä–∫–æ–¥–æ–≤: {hierarchy['barcodes'].get('total_barcodes', 0)}")
    print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤: {hierarchy['barcodes'].get('active_barcodes', 0)}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞—Ä–∫–æ–¥–æ–≤: {hierarchy['barcodes'].get('unique_barcodes', 0)}")
    print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {hierarchy['products'].get('unique_brands', 0)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å –±–∞—Ä–∫–æ–¥–∞–º–∏
    if overview['products_with_barcodes']:
        print(f"\nüì¶ –¢–û–í–ê–†–´ –° –ë–ê–†–ö–û–î–ê–ú–ò (—Ç–æ–ø 10):")
        print("-" * 60)
        for i, item in enumerate(overview['products_with_barcodes'][:10], 1):
            print(f"{i:2d}. nmID: {item['nm_id']}")
            print(f"    –ê—Ä—Ç–∏–∫—É–ª: {item['vendor_code']}")
            print(f"    –ë—Ä–µ–Ω–¥: {item['brand']}")
            print(f"    –ù–∞–∑–≤–∞–Ω–∏–µ: {item['title'][:50]}...")
            print(f"    –ë–∞—Ä–∫–æ–¥–æ–≤: {item['barcodes_count']} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {item['active_barcodes_count']})")
            print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –±—Ä–µ–Ω–¥–æ–≤
    if overview['top_brands']:
        print(f"üè∑Ô∏è  –¢–û–ü –ë–†–ï–ù–î–û–í:")
        print("-" * 40)
        for i, brand in enumerate(overview['top_brands'][:10], 1):
            print(f"{i:2d}. {brand['brand']}")
            print(f"    –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {brand['products_count']}")
            print(f"    –ê—Ä—Ç–∏–∫—É–ª–æ–≤: {brand['vendor_codes_count']}")
            print(f"    –ë–∞—Ä–∫–æ–¥–æ–≤: {brand['barcodes_count']}")
            print()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
    if overview['products_with_barcodes']:
        sample_nm_id = overview['products_with_barcodes'][0]['nm_id']
        print(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï {sample_nm_id}:")
        print("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å –±–∞—Ä–∫–æ–¥–∞–º–∏
            detail_query = f"""
            SELECT 
                p.nm_id,
                p.vendor_code,
                p.brand,
                p.title,
                p.subject,
                p.volume,
                sa.barcode,
                sa.size,
                sa.active as barcode_active,
                ue.price,
                ue.discounted_price,
                ue.discount
            FROM products p
            LEFT JOIN seller_articles sa ON p.nm_id = sa.nm_id
            LEFT JOIN unit_economics ue ON p.nm_id = ue.nm_id
            WHERE p.nm_id = {sample_nm_id}
            ORDER BY sa.barcode
            """
            
            detail_result = processor.db_client.client.rpc('exec_sql', {'sql': detail_query}).execute()
            
            if detail_result.data:
                product_info = detail_result.data[0]
                print(f"üì¶ –ü—Ä–æ–¥—É–∫—Ç:")
                print(f"   ‚Ä¢ nmID: {product_info['nm_id']}")
                print(f"   ‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞: {product_info['vendor_code']}")
                print(f"   ‚Ä¢ –ë—Ä–µ–Ω–¥: {product_info['brand']}")
                print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {product_info['title']}")
                print(f"   ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_info['subject']}")
                print(f"   ‚Ä¢ –û–±—ä–µ–º: {product_info['volume']} –ª")
                print(f"   ‚Ä¢ –¶–µ–Ω–∞: {product_info['price']} ‚ÇΩ")
                print(f"   ‚Ä¢ –¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {product_info['discounted_price']} ‚ÇΩ")
                print(f"   ‚Ä¢ –°–∫–∏–¥–∫–∞: {product_info['discount']}%")
                
                print(f"\nüè∑Ô∏è  –ë–∞—Ä–∫–æ–¥—ã ({len(detail_result.data)}):")
                for barcode_info in detail_result.data:
                    status = "‚úÖ" if barcode_info['barcode_active'] else "‚ùå"
                    print(f"   {status} {barcode_info['barcode']} (—Ä–∞–∑–º–µ—Ä: {barcode_info['size'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'})")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {e}")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")


if __name__ == "__main__":
    test_product_hierarchy()
